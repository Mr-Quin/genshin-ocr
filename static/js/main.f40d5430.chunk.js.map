{"version":3,"sources":["util/dataUrl.ts","data/translation.ts","util/hammingDistance.ts","ocr/parse/helper.ts","ocr/parse/guessMainStat.ts","ocr/parse/guessSubStats.ts","data/stats.ts","ocr/parse/guessEnhancement.ts","ocr/preprocessing.ts","traineddata/chi_sim.traineddata","ocr/ocr.ts","data/color.ts","ocr/parse/guessRarity.ts","util/color.ts","ocr/parse.ts","data/artifacts.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["imageDataToURL","imageData","canvas","document","createElement","ctx","getContext","width","height","canvasImageData","createImageData","data","set","putImageData","toDataURL","Error","fileToURL","file","Promise","resolve","reader","FileReader","onloadend","result","readAsDataURL","reject","statRef","atk","chs","eng","hp","def","eleMas","energyRecharge","healBonus","critRate","critDmg","physicalDmg","anemoDmg","geoDmg","electroDmg","hydroDmg","pyroDmg","cryoDmg","dendroDmg","hammingDistance","str1","str2","dist","toLowerCase","i","j","Math","max","length","match","garboRegex","RegExp","numberRegex","removeGarbo","text","replace","getValueType","value","endsWith","parseStatKey","key","language","entry","Object","entries","find","undefined","name","guessWith","ref","maxDistance","lines","map","line","some","guessMainStatValue","sort","a","b","confidence","matches","matchNumbers","filter","guessMainStatKey","values","guessMainStat","console","log","type","approx","parseFloat","guessSubStats","includes","split","statName","statValue","mainStatsData","1","2","3","4","5","guessEnhancement","statVal","rarity","statKey","poss","statArray","indexOf","processImageWithBandPassFilter","color1","color2","options","mode","clone","Uint8ClampedArray","from","bw","invert","r","g","ImageData","preprocessArtifact","image","threshold","multiplier","Marvin","thresholding","getWidth","getHeight","cropLinePos","ceil","y","rowSum","x","getIntComponent0","findCropLine","yPos","top","bottom","crop","splitImage","topData","botData","main","sub","path","dirname","gc","basename","getOcr","progressCb","onProgress","langFile","langPath","worker","createWorker","logger","m","errorHandler","err","error","load","loadLanguage","initialize","setParameters","tessedit_pageseg_mode","PSM","SPARSE_TEXT","recognize","terminate","COLORS","guessRarity","imageIn","cropImg","MarvinImage","avgColor","averageColor","reduce","acc","val","c1","c2","sum","v","pow","cur","sqrt","distance","hex","h","startsWith","substring","parseInt","hexToRgb","Infinity","guessPieceName","archaicPetra","flower","plume","sands","goblet","circlet","blizzardStrayer","bloodstainedChivalry","crimsonWitch","gladiatorFinale","heartOfDepth","lavaWalker","maidenBeloved","noblesseOblige","retracingBolide","thunderSmoother","thunderingFury","viridescentVenerer","wandererTroupe","berserker","braveHeart","defenderWill","exile","gambler","instructor","martialArtist","prayersForDestiny","prayersForIllumination","prayersForWisdom","prayersToSpringtime","resolutionOfSojourner","scholar","tinyMiracle","adventurer","luckyDog","travelingDoctor","flatMap","artifact","guessSetName","keys","悠古的磐岩","冰风迷途的勇士","染血的骑士道","炽烈的炎之魔女","角斗士的终幕礼","沉沦之心","渡过烈火的贤人","被怜爱的少女","昔日宗室之仪","逆飞的流星","平息鸣雷的尊者","如雷的盛怒","翠绿之影","流浪大地的乐团","战狂","勇者之心","守护之心","流放者","赌徒","教官","武人","祭水之人","祭火之人","祭雷之人","祭冰之人","行者之心","学士","奇迹","冒险家","幸运儿","游医","guessSlotName","生之花","死之羽","时之沙","空之杯","理之冠","parseArtifact","setData","mainStat","subStats","slot","piece","doAll","marvinLoad","url","img","processed","all","topRes","botRes","setRes","parse","enhancement","ImageDisplay","props","src","style","className","App","useState","origImg","setOrigImg","procImg","setProcImg","loading","setLoading","parsedText","setParsedText","useEffect","onPaste","e","clipboardData","files","imgUrl","window","addEventListener","removeEventListener","p","JSON","stringify","gridArea","overflowY","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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f,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,GACA,KACA,KACA,GACA,MAEJ,YAAa,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,MAC/E,WAAY,CAAC,EAAK,EAAK,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACnF,aAAc,CAAC,EAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,OAErF0E,EAAG,CACC5E,GAAI,CACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJH,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACjF,MAAO,CACH,IACA,IACA,IACA,KACA,KACA,KACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,GACA,MAEJ,OAAQ,CACJ,IACA,IACA,IACA,KACA,KACA,KACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,GACA,MAEJ,OAAQ,CACJ,IACA,KACA,KACA,KACA,KACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJ,eAAgB,CACZ,IACA,KACA,KACA,KACA,KACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJ,UAAW,CACP,IACA,IACA,IACA,KACA,KACA,KACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,GACA,MAEJK,OAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,KAC9E,kBAAmB,CACf,EACA,EACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJ,YAAa,CACT,IACA,IACA,IACA,IACA,EACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,GACA,MAEJ,WAAY,CACR,IACA,KACA,KACA,KACA,KACA,KACA,KACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJ,aAAc,CACV,IACA,IACA,IACA,EACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,GACA,KACA,OAGR2E,EAAG,CACC7E,GAAI,CACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJH,IAAK,CACD,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEJ,MAAO,CACH,EACA,EACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJ,OAAQ,CACJ,EACA,EACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJ,OAAQ,CACJ,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,GACA,KACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJ,eAAgB,CACZ,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,GACA,KACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJ,UAAW,CACP,EACA,EACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJK,OAAQ,CACJ,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEJ,kBAAmB,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","file":"static/js/main.f40d5430.chunk.js","sourcesContent":["export const imageDataToURL = (imageData: ImageData) => {\r\n    // create off-screen canvas element\r\n    const canvas = document.createElement('canvas')\r\n    const ctx = canvas.getContext('2d')\r\n    canvas.width = imageData.width\r\n    canvas.height = imageData.height\r\n    if (ctx) {\r\n        // create imageData object\r\n        const canvasImageData = ctx.createImageData(imageData.width, imageData.height)\r\n        // set our buffer as source\r\n        canvasImageData.data.set(imageData.data)\r\n        // update canvas with new data\r\n        ctx.putImageData(canvasImageData, 0, 0)\r\n        // produces a PNG file\r\n        return canvas.toDataURL()\r\n    }\r\n    throw new Error('Canvas context is not initialized')\r\n}\r\n\r\nexport const imageDataFromImageElement = (image: HTMLImageElement) => {\r\n    const tempCanvas = document.createElement('canvas')\r\n    const tempCtx = tempCanvas.getContext('2d')\r\n    tempCanvas.width = image.width\r\n    tempCanvas.height = image.height\r\n    tempCtx!.drawImage(image, 0, 0, image.width, image.height)\r\n    return tempCtx!.getImageData(0, 0, image.width, image.height)\r\n}\r\n\r\nexport const urlToImageData = (url: string): PromiseLike<ImageData> => {\r\n    return new Promise((resolve) => {\r\n        const img = new Image()\r\n        img.onload = () => resolve(imageDataFromImageElement(img))\r\n        img.src = url\r\n    })\r\n}\r\n\r\nexport const fileToURL = (file: File): PromiseLike<string> => {\r\n    if (!file) return Promise.reject('Not a file')\r\n    return new Promise((resolve) => {\r\n        const reader = new FileReader()\r\n        reader.onloadend = () => {\r\n            resolve(reader.result as string)\r\n        }\r\n        reader.readAsDataURL(file)\r\n    })\r\n}\r\n","export type Language = 'chs' | 'eng'\r\n\r\nexport const statRef = {\r\n    atk: { chs: '攻击力', eng: 'ATK' },\r\n    hp: { chs: '生命值', eng: 'HP' },\r\n    def: { chs: '防御力', eng: 'DEF' },\r\n    eleMas: { chs: '元素精通', eng: 'Elemental Mastery' },\r\n    energyRecharge: { chs: '元素充能效率', eng: 'Energy Recharge' },\r\n    healBonus: { chs: '治疗加成', eng: 'Heal Bonus' },\r\n    critRate: { chs: '暴击率', eng: 'Critical Rate' },\r\n    critDmg: { chs: '暴击伤害', eng: 'Critical Damage' },\r\n    physicalDmg: { chs: '物理伤害加成', eng: 'Physical Damage' },\r\n    anemoDmg: { chs: '风元素伤害加成', eng: 'Anemo Damage' },\r\n    geoDmg: { chs: '岩元素伤害加成', eng: 'Geo Damage' },\r\n    electroDmg: { chs: '雷元素伤害加成', eng: 'Electro Damage' },\r\n    hydroDmg: { chs: '水元素伤害加成', eng: 'Hydro Damage' },\r\n    pyroDmg: { chs: '火元素伤害加成', eng: 'Pyro Damage' },\r\n    cryoDmg: { chs: '冰元素伤害加成', eng: 'Cryo Damage' },\r\n    dendroDmg: { chs: '草元素伤害加成', eng: 'Dendro Damage' },\r\n}\r\n\r\nexport const elementsRef = {\r\n    physical: { chs: '物理', eng: 'Physical' },\r\n    anemo: { chs: '风元素', eng: 'Anemo' },\r\n    geo: { chs: '岩元素', eng: 'Geo' },\r\n    electro: { chs: '雷元素', eng: 'Electro' },\r\n    hydro: { chs: '水元素', eng: 'Hydro' },\r\n    pyro: { chs: '火元素', eng: 'Pyro' },\r\n    cryo: { chs: '冰元素', eng: 'Cryo' },\r\n    dendro: { chs: '草元素', eng: 'Dendro' },\r\n}\r\n\r\nexport const pieceRef = {\r\n    archaicPetra: {\r\n        flower: '磐陀裂生之花',\r\n        plume: '嵯峨群峰之翼',\r\n        sands: '星罗圭壁之晷',\r\n        goblet: '巉岩琢塑之樽',\r\n        circlet: '不动玄石之相',\r\n    },\r\n    blizzardStrayer: {\r\n        flower: '历经风雪的思念',\r\n        plume: '摧冰而行的执望',\r\n        sands: '冰雪故园的终期',\r\n        goblet: '遍结寒霜的傲骨',\r\n        circlet: '破冰踏雪的回音',\r\n    },\r\n    bloodstainedChivalry: {\r\n        flower: '染血的铁之心',\r\n        plume: '染血的黑之羽',\r\n        sands: '骑士染血之时',\r\n        goblet: '染血骑士之杯',\r\n        circlet: '染血的铁假面',\r\n    },\r\n    crimsonWitch: {\r\n        flower: '魔女的炎之花',\r\n        plume: '魔女常燃之羽',\r\n        sands: '魔女破灭之时',\r\n        goblet: '魔女的心之火',\r\n        circlet: '焦灼的魔女帽',\r\n    },\r\n    gladiatorFinale: {\r\n        flower: '角斗士的留恋',\r\n        plume: '角斗士的归宿',\r\n        sands: '角斗士的希冀',\r\n        goblet: '角斗士的酣醉',\r\n        circlet: '角斗士的凯旋',\r\n    },\r\n    heartOfDepth: {\r\n        flower: '饰金胸花',\r\n        plume: '追忆之风',\r\n        sands: '坚铜罗盘',\r\n        goblet: '沉波之盏',\r\n        circlet: '酒渍船帽',\r\n    },\r\n    lavaWalker: {\r\n        flower: '渡火者的决绝',\r\n        plume: '渡火者的解脱',\r\n        sands: '渡火者的煎熬',\r\n        goblet: '渡火者的醒悟',\r\n        circlet: '渡火者的智慧',\r\n    },\r\n    maidenBeloved: {\r\n        flower: '远方的少女的心',\r\n        plume: '少女飘摇的思念',\r\n        sands: '少女苦短的良辰',\r\n        goblet: '少女片刻的闲暇',\r\n        circlet: '少女易逝的芳颜',\r\n    },\r\n    noblesseOblige: {\r\n        flower: '宗室之花',\r\n        plume: '宗室之翎',\r\n        sands: '宗室时计',\r\n        goblet: '宗室银瓮',\r\n        circlet: '宗室面具',\r\n    },\r\n    retracingBolide: {\r\n        flower: '夏祭之花',\r\n        plume: '夏祭终末',\r\n        sands: '夏祭之刻',\r\n        goblet: '夏祭水玉',\r\n        circlet: '夏祭之面',\r\n    },\r\n    thunderSmoother: {\r\n        flower: '平雷之心',\r\n        plume: '平雷之羽',\r\n        sands: '平雷之刻',\r\n        goblet: '平雷之器',\r\n        circlet: '平雷之冠',\r\n    },\r\n    thunderingFury: {\r\n        flower: '雷鸟的怜悯',\r\n        plume: '雷灾的孑遗',\r\n        sands: '雷霆的时计',\r\n        goblet: '降雷的凶兆',\r\n        circlet: '唤雷的头冠',\r\n    },\r\n    viridescentVenerer: {\r\n        flower: '野花记忆的绿野',\r\n        plume: '猎人青翠的箭羽',\r\n        sands: '翠绿猎人的笃定',\r\n        goblet: '翠绿猎人的容器',\r\n        circlet: '翠绿的猎人之冠',\r\n    },\r\n    wandererTroupe: {\r\n        flower: '乐团的晨光',\r\n        plume: '琴师的箭羽',\r\n        sands: '终幕的时计',\r\n        goblet: '吟游者之壶',\r\n        circlet: '指挥的礼帽',\r\n    },\r\n    berserker: {\r\n        flower: '战狂的蔷薇',\r\n        plume: '战狂的翎羽',\r\n        sands: '战狂的时计',\r\n        goblet: '战狂的骨杯',\r\n        circlet: '战狂的鬼面',\r\n    },\r\n    braveHeart: {\r\n        flower: '勇士的勋章',\r\n        plume: '勇士的期许',\r\n        sands: '勇士的坚毅',\r\n        goblet: '勇士的壮行',\r\n        circlet: '勇士的冠冕',\r\n    },\r\n    defenderWill: {\r\n        flower: '守护之花',\r\n        plume: '守护徽印',\r\n        sands: '守护座钟',\r\n        goblet: '守护之皿',\r\n        circlet: '守护束带',\r\n    },\r\n    exile: {\r\n        flower: '流放者之花',\r\n        plume: '流放者之羽',\r\n        sands: '流放者怀表',\r\n        goblet: '流放者之杯',\r\n        circlet: '流放者头冠',\r\n    },\r\n    gambler: {\r\n        flower: '赌徒的胸花',\r\n        plume: '赌徒的羽饰',\r\n        sands: '赌徒的怀表',\r\n        goblet: '赌徒的骰蛊',\r\n        circlet: '赌徒的耳环',\r\n    },\r\n    instructor: {\r\n        flower: '教官的胸花',\r\n        plume: '教官的羽饰',\r\n        sands: '教官的怀表',\r\n        goblet: '教官的茶杯',\r\n        circlet: '教官的帽子',\r\n    },\r\n    martialArtist: {\r\n        flower: '武人的红花',\r\n        plume: '武人的羽饰',\r\n        sands: '武人的水漏',\r\n        goblet: '武人的酒杯',\r\n        circlet: '武人的头巾',\r\n    },\r\n    prayersForDestiny: { circlet: '祭水礼冠' },\r\n    prayersForIllumination: { circlet: '祭火礼冠' },\r\n    prayersForWisdom: { circlet: '祭雷礼冠' },\r\n    prayersToSpringtime: { circlet: '祭冰礼冠' },\r\n    resolutionOfSojourner: {\r\n        flower: '故人之心',\r\n        plume: '归乡之羽',\r\n        sands: '逐光之石',\r\n        goblet: '异国之盏',\r\n        circlet: '感别之冠',\r\n    },\r\n    scholar: {\r\n        flower: '学士的书签',\r\n        plume: '学士的羽笔',\r\n        sands: '学士的时钟',\r\n        goblet: '学士的墨杯',\r\n        circlet: '学士的镜片',\r\n    },\r\n    tinyMiracle: {\r\n        flower: '奇迹之花',\r\n        plume: '奇迹之羽',\r\n        sands: '奇迹之沙',\r\n        goblet: '奇迹之杯',\r\n        circlet: '奇迹耳坠',\r\n    },\r\n    adventurer: {\r\n        flower: '冒险家之花',\r\n        plume: '冒险家尾羽',\r\n        sands: '冒险家怀表',\r\n        goblet: '冒险家金杯',\r\n        circlet: '冒险家头带',\r\n    },\r\n    luckyDog: {\r\n        flower: '幸运儿绿花',\r\n        plume: '幸运儿鹰羽',\r\n        sands: '幸运儿沙漏',\r\n        goblet: '幸运儿之杯',\r\n        circlet: '幸运儿银冠',\r\n    },\r\n    travelingDoctor: {\r\n        flower: '游医的银莲',\r\n        plume: '游医的枭羽',\r\n        sands: '游医的怀钟',\r\n        goblet: '游医的药壶',\r\n        circlet: '游医的方巾',\r\n    },\r\n}\r\n","export const hammingDistance = (str1: string, str2: string) => {\r\n    let dist = 0\r\n    str1 = str1.toLowerCase()\r\n    str2 = str2.toLowerCase()\r\n    for (let i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\r\n        let match = true\r\n        if (!str1[i] || !str2[i] || str1[i] !== str2[i]) match = false\r\n        if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i]) match = true\r\n        if (!match) dist++\r\n    }\r\n    return dist\r\n}\r\n","// match spaces and irrelevant special chars\r\nimport { Language, statRef } from '../../data/translation'\r\nimport { hammingDistance } from '../../util/hammingDistance'\r\n\r\nconst garboRegex = new RegExp(/(\\s|[-!$^&*()_|~=`{}\\[\\]:\";<>?,\\/\\\\|↵，、【】])/g)\r\n// match numbers and numbers ending in percentage sign\r\nconst numberRegex = new RegExp(/(?:\\d*\\.)?\\d+%|(?:\\d*\\.)?\\d+/)\r\n\r\nexport const removeGarbo = (text: string) => text.replace(garboRegex, '')\r\nexport const matchNumbers = (text: string) => text.match(numberRegex)\r\n\r\nexport const getValueType = (value: string) => (value.endsWith('%') ? 'percent' : 'flat')\r\n\r\nexport const parseStatKey = (key: string, language: Language = 'chs') => {\r\n    const entry = Object.entries(statRef).find(([_, value]) => {\r\n        return hammingDistance(value[language], key) <= 1\r\n    })\r\n    if (entry !== undefined) {\r\n        return { key: entry[0], name: entry[1][language] }\r\n    }\r\n    // undefined is returned if no match\r\n}\r\n\r\nexport const guessWith = (ref: string[], maxDistance = 0) => (data: Tesseract.RecognizeResult) => {\r\n    // should change to filter to return list of possible matches\r\n    const match = ref.find((name) => {\r\n        return data.data.lines\r\n            .map((line) => removeGarbo(line.text))\r\n            .some((text) => {\r\n                if (text === '') return false\r\n                return hammingDistance(text, name) <= maxDistance\r\n            })\r\n    })\r\n    return match\r\n}\r\n","import { getValueType, guessWith, matchNumbers, parseStatKey, removeGarbo } from './helper'\r\nimport { statRef } from '../../data/translation'\r\n\r\nconst guessMainStatValue = (data: Tesseract.RecognizeResult) => {\r\n    return data.data.lines\r\n        .sort((a, b) => {\r\n            return b.confidence - a.confidence\r\n        })\r\n        .map((line) => {\r\n            const text = removeGarbo(line.text)\r\n            const matches = matchNumbers(text)\r\n            if (matches) return matches[0]\r\n            return matches\r\n        })\r\n        .filter((match): match is string => match !== null)\r\n}\r\n\r\nconst guessMainStatKey = guessWith(Object.values(statRef).map((a) => a.chs))\r\n\r\nexport const guessMainStat = (data: Tesseract.RecognizeResult) => {\r\n    const value = guessMainStatValue(data)\r\n    console.log(value)\r\n    const name = guessMainStatKey(data) ?? ''\r\n    const type = getValueType(value[0])\r\n    const approx = parseStatKey(name)\r\n\r\n    return { key: approx?.key, name: approx?.name, value: parseFloat(value[0]), type }\r\n}\r\n\r\nexport default guessMainStat\r\n","import { getValueType, parseStatKey, removeGarbo } from './helper'\r\n\r\nconst guessSubStats = (data: Tesseract.RecognizeResult) => {\r\n    // assume substat lines are in the shape of \"name+value(%)\"\r\n    return data.data.lines\r\n        .map((line) => {\r\n            const text = removeGarbo(line.text)\r\n            if (!text.includes('+')) return null\r\n            return text.split('+')\r\n        })\r\n        .filter((match): match is string[] => match !== null)\r\n        .map((match) => {\r\n            const [statName, statValue] = match\r\n            const type = getValueType(statValue)\r\n            const approx = parseStatKey(statName)\r\n            const key = approx?.key\r\n            const name = approx?.name ?? statName\r\n            return { key, name, value: parseFloat(statValue), type }\r\n        })\r\n}\r\n\r\nexport default guessSubStats\r\n","// possible roll values\r\nexport const subStatsData = {\r\n    hp: {\r\n        1: [24, 30],\r\n        2: [50, 61, 72],\r\n        3: [100, 115, 129, 143],\r\n        4: [167, 191, 215, 239],\r\n        5: [209, 239, 269, 299],\r\n    },\r\n    'hp%': {\r\n        1: [1.2, 1.5],\r\n        2: [1.6, 2, 2.3],\r\n        3: [2.5, 2.8, 3.2, 3.5],\r\n        4: [3.3, 3.7, 4.2, 4.7],\r\n        5: [4.1, 4.7, 5.3, 5.8],\r\n    },\r\n    atk: { 1: [2], 2: [3, 4, 5], 3: [7, 8, 9], 4: [11, 12, 14, 16], 5: [14, 16, 18, 19] },\r\n    'atk%': {\r\n        1: [1.2, 1.5],\r\n        2: [1.6, 2, 2.3],\r\n        3: [2.5, 2.8, 3.2, 3.5],\r\n        4: [3.3, 3.7, 4.2, 4.7],\r\n        5: [4.1, 4.7, 5.3, 5.8],\r\n    },\r\n    def: { 1: [2], 2: [4, 5, 6], 3: [8, 9, 10, 11], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n    'def%': {\r\n        1: [1.5, 1.8],\r\n        2: [2, 2.5, 2.9],\r\n        3: [3.1, 3.5, 3.9, 4.4],\r\n        4: [4.1, 4.7, 5.3, 5.8],\r\n        5: [5.1, 5.8, 6.6, 7.3],\r\n    },\r\n    eleMas: {\r\n        1: [5, 6],\r\n        2: [7, 8, 9],\r\n        3: [10, 11, 13, 14],\r\n        4: [13, 15, 17, 19],\r\n        5: [16, 19, 21, 23],\r\n    },\r\n    'energyRecharge%': {\r\n        1: [1.3, 1.6],\r\n        2: [1.8, 2.2, 2.6],\r\n        3: [2.7, 3.1, 3.5, 3.9],\r\n        4: [3.6, 4.1, 4.7, 5.2],\r\n        5: [4.5, 5.2, 5.8, 6.5],\r\n    },\r\n    'critRate%': {\r\n        1: [0.8, 1],\r\n        2: [1.1, 1.3, 1.6],\r\n        3: [1.6, 1.9, 2.1, 2.3],\r\n        4: [2.2, 2.5, 2.8, 3.1],\r\n        5: [2.7, 3.1, 3.5, 3.9],\r\n    },\r\n    'critDmg%': {\r\n        1: [1.6, 1.9],\r\n        2: [2.2, 2.6, 3.1],\r\n        3: [3.3, 3.7, 4.2, 4.7],\r\n        4: [4.4, 5, 5.6, 6.2],\r\n        5: [5.4, 6.2, 7, 7.8],\r\n    },\r\n}\r\n\r\n// stat at each level\r\nexport const mainStatsData = {\r\n    1: {\r\n        hp: [129, 178, 227, 275, 324],\r\n        atk: [8, 12, 15, 18, 21],\r\n        'hp%': [3.1, 4.3, 5.5, 6.7, 7.9],\r\n        'atk%': [3.1, 4.3, 5.5, 6.7, 7.9],\r\n        'def%': [3.9, 5.4, 6.9, 8.4, 9.9],\r\n        'physicalDmg%': [3.9, 5.4, 6.9, 8.4, 9.9],\r\n        'eleDmg%': [3.1, 4.3, 5.5, 6.7, 7.9],\r\n        eleMas: [13, 17, 22, 27, 32],\r\n        'energyRecharge%': [3.5, 4.8, 6.1, 7.5, 8.8],\r\n        'critRate%': [2.1, 2.9, 3.7, 4.5, 5.3],\r\n        'critDmg%': [4.2, 5.8, 7.4, 9.0, 10.5],\r\n        'healBonus%': [2.4, 3.3, 4.3, 5.2, 6.1],\r\n    },\r\n    2: {\r\n        hp: [258, 331, 404, 478, 551, 624, 697, 770, 843],\r\n        atk: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n        'hp%': [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n        'atk%': [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n        'def%': [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n        'physicalDmg%': [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n        'eleDmg%': [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n        eleMas: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n        'energyRecharge%': [4.7, 6, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2],\r\n        'critRate%': [2.8, 3.6, 4.4, 5.2, 6, 6.8, 7.6, 8.3, 9.1],\r\n        'critDmg%': [5.6, 7.2, 8.8, 10.4, 11.9, 13.5, 15.1, 16.7, 18.3],\r\n        'healBonus%': [3.2, 4.1, 5.1, 6, 6.9, 7.8, 8.7, 9.6, 10.5],\r\n    },\r\n    3: {\r\n        hp: [430, 552, 674, 796, 918, 1040, 1162, 1283, 1405, 1527, 1649, 1771, 1893],\r\n        atk: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123],\r\n        'hp%': [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n        'atk%': [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n        'def%': [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n        'physicalDmg%': [\r\n            6.6,\r\n            8.4,\r\n            10.3,\r\n            12.1,\r\n            14.0,\r\n            15.8,\r\n            17.7,\r\n            19.6,\r\n            21.4,\r\n            23.3,\r\n            25.1,\r\n            27.0,\r\n            28.8,\r\n        ],\r\n        'eleDmg%': [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n        eleMas: [21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 80, 86, 92],\r\n        'energyRecharge%': [\r\n            5.8,\r\n            7.5,\r\n            9.1,\r\n            10.8,\r\n            12.4,\r\n            14.1,\r\n            15.7,\r\n            17.4,\r\n            19.0,\r\n            20.7,\r\n            22.3,\r\n            24.0,\r\n            25.6,\r\n        ],\r\n        'critRate%': [3.5, 4.5, 5.5, 6.5, 7.5, 8.4, 9.4, 10.4, 11.4, 12.4, 13.4, 14.4, 15.4],\r\n        'critDmg%': [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8],\r\n        'healBonus%': [4.0, 5.2, 6.3, 7.5, 8.6, 9.8, 10.9, 12.0, 13.2, 14.3, 15.5, 16.6, 17.8],\r\n    },\r\n    4: {\r\n        hp: [\r\n            645,\r\n            828,\r\n            1011,\r\n            1194,\r\n            1377,\r\n            1559,\r\n            1742,\r\n            1925,\r\n            2108,\r\n            2291,\r\n            2474,\r\n            2657,\r\n            2839,\r\n            3022,\r\n            3205,\r\n            3388,\r\n            3571,\r\n        ],\r\n        atk: [42, 54, 66, 78, 90, 102, 113, 125, 137, 149, 161, 173, 185, 197, 209, 221, 232],\r\n        'hp%': [\r\n            6.3,\r\n            8.1,\r\n            9.9,\r\n            11.6,\r\n            13.4,\r\n            15.2,\r\n            17.0,\r\n            18.8,\r\n            20.6,\r\n            22.3,\r\n            24.1,\r\n            25.9,\r\n            27.7,\r\n            29.5,\r\n            31.3,\r\n            33.0,\r\n            34.8,\r\n        ],\r\n        'atk%': [\r\n            6.3,\r\n            8.1,\r\n            9.9,\r\n            11.6,\r\n            13.4,\r\n            15.2,\r\n            17.0,\r\n            18.8,\r\n            20.6,\r\n            22.3,\r\n            24.1,\r\n            25.9,\r\n            27.7,\r\n            29.5,\r\n            31.3,\r\n            33.0,\r\n            34.8,\r\n        ],\r\n        'def%': [\r\n            7.9,\r\n            10.1,\r\n            12.3,\r\n            14.6,\r\n            16.8,\r\n            19.0,\r\n            21.2,\r\n            23.5,\r\n            25.7,\r\n            27.9,\r\n            30.2,\r\n            32.4,\r\n            34.6,\r\n            36.8,\r\n            39.1,\r\n            41.3,\r\n            43.5,\r\n        ],\r\n        'physicalDmg%': [\r\n            7.9,\r\n            10.1,\r\n            12.3,\r\n            14.6,\r\n            16.8,\r\n            19.0,\r\n            21.2,\r\n            23.5,\r\n            25.7,\r\n            27.9,\r\n            30.2,\r\n            32.4,\r\n            34.6,\r\n            36.8,\r\n            39.1,\r\n            41.3,\r\n            43.5,\r\n        ],\r\n        'eleDmg%': [\r\n            6.3,\r\n            8.1,\r\n            9.9,\r\n            11.6,\r\n            13.4,\r\n            15.2,\r\n            17.0,\r\n            18.8,\r\n            20.6,\r\n            22.3,\r\n            24.1,\r\n            25.9,\r\n            27.7,\r\n            29.5,\r\n            31.3,\r\n            33.0,\r\n            34.8,\r\n        ],\r\n        eleMas: [25, 32, 39, 47, 54, 61, 68, 75, 82, 89, 97, 104, 111, 118, 125, 132, 139],\r\n        'energyRecharge%': [\r\n            7.0,\r\n            9.0,\r\n            11.0,\r\n            12.9,\r\n            14.9,\r\n            16.9,\r\n            18.9,\r\n            20.9,\r\n            22.8,\r\n            24.8,\r\n            26.8,\r\n            28.8,\r\n            30.8,\r\n            32.8,\r\n            34.7,\r\n            36.7,\r\n            38.7,\r\n        ],\r\n        'critRate%': [\r\n            4.2,\r\n            5.4,\r\n            6.6,\r\n            7.8,\r\n            9.0,\r\n            10.1,\r\n            11.3,\r\n            12.5,\r\n            13.7,\r\n            14.9,\r\n            16.1,\r\n            17.3,\r\n            18.5,\r\n            19.7,\r\n            20.8,\r\n            22.0,\r\n            23.2,\r\n        ],\r\n        'critDmg%': [\r\n            8.4,\r\n            10.8,\r\n            13.1,\r\n            15.5,\r\n            17.9,\r\n            20.3,\r\n            22.7,\r\n            25.0,\r\n            27.4,\r\n            29.8,\r\n            32.2,\r\n            34.5,\r\n            36.9,\r\n            39.3,\r\n            41.7,\r\n            44.1,\r\n            46.4,\r\n        ],\r\n        'healBonus%': [\r\n            4.8,\r\n            6.2,\r\n            7.6,\r\n            9.0,\r\n            10.3,\r\n            11.7,\r\n            13.1,\r\n            14.4,\r\n            15.8,\r\n            17.2,\r\n            18.6,\r\n            19.9,\r\n            21.3,\r\n            22.7,\r\n            24.0,\r\n            25.4,\r\n            26.8,\r\n        ],\r\n    },\r\n    5: {\r\n        hp: [\r\n            717,\r\n            920,\r\n            1123,\r\n            1326,\r\n            1530,\r\n            1733,\r\n            1936,\r\n            2139,\r\n            2342,\r\n            2545,\r\n            2749,\r\n            2952,\r\n            3155,\r\n            3358,\r\n            3561,\r\n            3764,\r\n            3967,\r\n            4171,\r\n            4374,\r\n            4577,\r\n            4780,\r\n        ],\r\n        atk: [\r\n            47,\r\n            60,\r\n            73,\r\n            86,\r\n            100,\r\n            113,\r\n            126,\r\n            139,\r\n            152,\r\n            166,\r\n            179,\r\n            192,\r\n            205,\r\n            219,\r\n            232,\r\n            245,\r\n            258,\r\n            272,\r\n            285,\r\n            298,\r\n            311,\r\n        ],\r\n        'hp%': [\r\n            7.0,\r\n            9.0,\r\n            11.0,\r\n            12.9,\r\n            14.9,\r\n            16.9,\r\n            18.9,\r\n            20.9,\r\n            22.8,\r\n            24.8,\r\n            26.8,\r\n            28.8,\r\n            30.8,\r\n            32.8,\r\n            34.7,\r\n            36.7,\r\n            38.7,\r\n            40.7,\r\n            42.7,\r\n            44.6,\r\n            46.6,\r\n        ],\r\n        'atk%': [\r\n            7.0,\r\n            9.0,\r\n            11.0,\r\n            12.9,\r\n            14.9,\r\n            16.9,\r\n            18.9,\r\n            20.9,\r\n            22.8,\r\n            24.8,\r\n            26.8,\r\n            28.8,\r\n            30.8,\r\n            32.8,\r\n            34.7,\r\n            36.7,\r\n            38.7,\r\n            40.7,\r\n            42.7,\r\n            44.6,\r\n            46.6,\r\n        ],\r\n        'def%': [\r\n            8.7,\r\n            11.2,\r\n            13.7,\r\n            16.2,\r\n            18.6,\r\n            21.1,\r\n            23.6,\r\n            26.1,\r\n            28.6,\r\n            31,\r\n            33.5,\r\n            36,\r\n            38.5,\r\n            40.9,\r\n            43.4,\r\n            45.9,\r\n            48.4,\r\n            50.8,\r\n            53.3,\r\n            55.8,\r\n            58.3,\r\n        ],\r\n        'physicalDmg%': [\r\n            8.7,\r\n            11.2,\r\n            13.7,\r\n            16.2,\r\n            18.6,\r\n            21.1,\r\n            23.6,\r\n            26.1,\r\n            28.6,\r\n            31,\r\n            33.5,\r\n            36,\r\n            38.5,\r\n            40.9,\r\n            43.4,\r\n            45.9,\r\n            48.4,\r\n            50.8,\r\n            53.3,\r\n            55.8,\r\n            58.3,\r\n        ],\r\n        'eleDmg%': [\r\n            7.0,\r\n            9.0,\r\n            11.0,\r\n            12.9,\r\n            14.9,\r\n            16.9,\r\n            18.9,\r\n            20.9,\r\n            22.8,\r\n            24.8,\r\n            26.8,\r\n            28.8,\r\n            30.8,\r\n            32.8,\r\n            34.7,\r\n            36.7,\r\n            38.7,\r\n            40.7,\r\n            42.7,\r\n            44.6,\r\n            46.6,\r\n        ],\r\n        eleMas: [\r\n            28,\r\n            36,\r\n            44,\r\n            52,\r\n            60,\r\n            68,\r\n            76,\r\n            84,\r\n            91,\r\n            99,\r\n            107,\r\n            115,\r\n            123,\r\n            131,\r\n            139,\r\n            147,\r\n            155,\r\n            163,\r\n            171,\r\n            179,\r\n            187,\r\n        ],\r\n        'energyRecharge%': [\r\n            7.8,\r\n            10.0,\r\n            12.2,\r\n            14.4,\r\n            16.6,\r\n            18.8,\r\n            21.0,\r\n            23.2,\r\n            25.4,\r\n            27.6,\r\n            29.8,\r\n            32.0,\r\n            34.2,\r\n            36.4,\r\n            38.6,\r\n            40.8,\r\n            43.0,\r\n            45.2,\r\n            47.4,\r\n            49.6,\r\n            51.8,\r\n        ],\r\n        'critRate%': [\r\n            4.7,\r\n            6.0,\r\n            7.3,\r\n            8.6,\r\n            9.9,\r\n            11.3,\r\n            12.6,\r\n            13.9,\r\n            15.2,\r\n            16.6,\r\n            17.9,\r\n            19.2,\r\n            20.5,\r\n            21.8,\r\n            23.2,\r\n            24.5,\r\n            25.8,\r\n            27.1,\r\n            28.4,\r\n            29.8,\r\n            31.1,\r\n        ],\r\n        'critDmg%': [\r\n            9.3,\r\n            11.9,\r\n            14.6,\r\n            17.2,\r\n            19.9,\r\n            22.5,\r\n            25.5,\r\n            27.8,\r\n            30.5,\r\n            33.1,\r\n            35.8,\r\n            38.4,\r\n            41.1,\r\n            43.7,\r\n            46.3,\r\n            49.0,\r\n            51.6,\r\n            54.3,\r\n            56.9,\r\n            59.6,\r\n            62.2,\r\n        ],\r\n        'healBonus%': [\r\n            5.4,\r\n            6.9,\r\n            8.4,\r\n            10.0,\r\n            11.5,\r\n            13.0,\r\n            14.5,\r\n            16.1,\r\n            17.6,\r\n            19.1,\r\n            20.6,\r\n            22.2,\r\n            23.7,\r\n            25.2,\r\n            26.7,\r\n            28.3,\r\n            29.8,\r\n            31.3,\r\n            32.8,\r\n            34.4,\r\n            35.9,\r\n        ],\r\n    },\r\n}\r\n","// guess enhancement level based on main stat value\r\nimport { Rarity } from './guessRarity'\r\nimport { mainStatsData } from '../../data/stats'\r\n\r\nconst guessEnhancement = (statVal: number, rarity: Rarity, statKey?: string): number => {\r\n    const data = mainStatsData[rarity]\r\n    const poss = Object.values(data).find((statArray) => statArray.includes(statVal))\r\n    if (poss) {\r\n        return poss.indexOf(statVal)\r\n    }\r\n    return 0 // defaults to 0\r\n}\r\n\r\nexport default guessEnhancement\r\n","import { Marvin, MarvinImage } from 'marvinj-ts'\r\nimport { imageDataToURL } from '../util/dataUrl'\r\n\r\nexport const findCropLine = (image: MarvinImage, threshold = 220, multiplier: number = 0.85) => {\r\n    const clone = image.clone()\r\n    Marvin.thresholding(clone, clone, threshold, 255)\r\n    const width = clone.getWidth()\r\n    const height = clone.getHeight()\r\n    const max = width * 255\r\n\r\n    // default to half height\r\n    let cropLinePos = Math.ceil(height / 2)\r\n\r\n    for (let y = 0; y < height; y++) {\r\n        let rowSum = 0\r\n        for (let x = 0; x < width; x++) {\r\n            // since the image is thresholded, every channel should be the same,\r\n            const brightness = clone.getIntComponent0(x, y)\r\n            rowSum += brightness\r\n        }\r\n        if (rowSum >= multiplier * max) {\r\n            cropLinePos = y\r\n            break\r\n        }\r\n    }\r\n    return cropLinePos\r\n}\r\n\r\nexport const splitImage = (image: MarvinImage, yPos: number): [MarvinImage, MarvinImage] => {\r\n    const top = image.clone()\r\n    const bottom = image.clone()\r\n\r\n    Marvin.crop(image, top, 0, 0, image.getWidth(), yPos)\r\n    Marvin.crop(image, bottom, 0, yPos, image.getWidth(), image.getHeight() - yPos)\r\n\r\n    return [top, bottom]\r\n}\r\n\r\n// https://github.com/frzyc/genshin-optimizer\r\ntype Color = { r: number; g: number; b: number }\r\nexport const processImageWithBandPassFilter = (\r\n    imageData: ImageData,\r\n    color1: Color,\r\n    color2: Color,\r\n    options: { mode?: string }\r\n) => {\r\n    //region - \"top\",\"bot\",\"all\" default all\r\n    //mode - \"bw\",\"color\",\"invert\" default color\r\n    let { mode } = options\r\n    const clone = Uint8ClampedArray.from(imageData.data)\r\n    const bw = mode === 'bw'\r\n    const invert = mode === 'invert'\r\n    for (let i = 0; i < clone.length; i += 4) {\r\n        const r = clone[i]\r\n        const g = clone[i + 1]\r\n        const b = clone[i + 2]\r\n        if (\r\n            r >= color1.r &&\r\n            r <= color2.r &&\r\n            g >= color1.g &&\r\n            g <= color2.g &&\r\n            b >= color1.b &&\r\n            b <= color2.b\r\n        ) {\r\n            if (bw) {\r\n                clone[i] = clone[i + 1] = clone[i + 2] = 0\r\n            } else if (invert) {\r\n                clone[i] = 255 - r\r\n                clone[i + 1] = 255 - g\r\n                clone[i + 2] = 255 - b\r\n            }\r\n        } else {\r\n            clone[i] = clone[i + 1] = clone[i + 2] = 255\r\n        }\r\n    }\r\n    return new ImageData(clone, imageData.width, imageData.height)\r\n}\r\n\r\nexport const preprocessArtifact = (image: MarvinImage) => {\r\n    const line = findCropLine(image)\r\n    const [top, bottom] = splitImage(image, line)\r\n\r\n    const topData = new ImageData(top.data, top.getWidth(), top.getHeight())\r\n    const botData = new ImageData(bottom.data, bottom.getWidth(), bottom.getHeight())\r\n\r\n    return {\r\n        main: imageDataToURL(\r\n            processImageWithBandPassFilter(\r\n                topData,\r\n                { r: 140, g: 140, b: 140 },\r\n                { r: 255, g: 255, b: 255 },\r\n                { mode: 'bw' }\r\n            )\r\n        ),\r\n        sub: imageDataToURL(\r\n            processImageWithBandPassFilter(\r\n                botData,\r\n                { r: 30, g: 65, b: 80 },\r\n                { r: 130, g: 160, b: 160 },\r\n                { mode: 'bw' }\r\n            )\r\n        ),\r\n        set: imageDataToURL(\r\n            processImageWithBandPassFilter(\r\n                botData,\r\n                { r: 0, g: 170, b: 0 },\r\n                { r: 180, g: 255, b: 255 },\r\n                { mode: 'bw' }\r\n            )\r\n        ),\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/chi_sim.dc1be34a.traineddata\";","import { createWorker, PSM } from 'tesseract.js'\r\n// @ts-ignore\r\nimport gc from '../traineddata/chi_sim.traineddata'\r\nimport path from 'path'\r\nconsole.log(path.dirname(gc), path.basename(gc))\r\n\r\ntype Image =\r\n    | string\r\n    | HTMLImageElement\r\n    | HTMLCanvasElement\r\n    | HTMLVideoElement\r\n    | CanvasRenderingContext2D\r\n    | File\r\n    | Blob\r\n    | ImageData\r\n    | Buffer\r\n\r\nexport type TesseractProgress = {\r\n    workerId: string\r\n    jobId: string\r\n    status:\r\n        | 'loading tesseract core'\r\n        | 'loading language traineddata'\r\n        | 'initializing api'\r\n        | 'recognizing text'\r\n    progress: number\r\n}\r\n\r\nexport type OcrOptions = {\r\n    langPath?: string\r\n    langFile?: string\r\n    onProgress?: (m: TesseractProgress) => any\r\n}\r\nconst getOcr = async (image: Image, options: OcrOptions = {}) => {\r\n    const progressCb = options.onProgress\r\n    const langFile = options.langFile ?? 'chi_sim'\r\n    const langPath = options.langPath ?? '/'\r\n\r\n    const worker = createWorker({\r\n        // langPath,\r\n        // gzip: options.langPath !== undefined,\r\n        logger: (m: TesseractProgress) => {\r\n            if (progressCb) progressCb(m)\r\n        },\r\n        errorHandler: (err) => console.error(err),\r\n    })\r\n    await worker.load()\r\n    await worker.loadLanguage(langFile)\r\n    await worker.initialize(langFile)\r\n    // sparse text seems to work better\r\n    // @ts-ignore\r\n    await worker.setParameters({ tessedit_pageseg_mode: PSM.SPARSE_TEXT })\r\n    const result = await worker.recognize(image)\r\n    await worker.terminate()\r\n    return result\r\n}\r\n\r\nexport default getOcr\r\n","// arbitrary values that works pretty well\r\nexport const COLORS = {\r\n    3: '#60759a',\r\n    4: '#8a66a0',\r\n    5: '#9c7354',\r\n}\r\n","import { Marvin, MarvinImage } from 'marvinj-ts'\r\nimport { COLORS } from '../../data/color'\r\nimport { distance, hexToRgb } from '../../util/color'\r\n\r\nexport type Rarity = 1 | 2 | 3 | 4 | 5 | '1' | '2' | '3' | '4' | '5'\r\n\r\n// guess stars based on average color\r\nconst guessRarity = (imageIn: MarvinImage): Rarity => {\r\n    const width = imageIn.getWidth()\r\n    const height = imageIn.getHeight()\r\n    const cropImg = new MarvinImage(width, height)\r\n    Marvin.crop(imageIn, cropImg, 0, 0, width, Math.ceil(height / 2))\r\n    const avgColor: [number, number, number] = Marvin.averageColor(cropImg)\r\n    const min = Object.entries(COLORS).reduce(\r\n        (acc, [key, val]) => {\r\n            const dist = distance(avgColor, hexToRgb(val))\r\n            if (dist < acc[1]) return [key, dist]\r\n            return acc\r\n        },\r\n        ['', Infinity]\r\n    )\r\n    return min[0] as Rarity\r\n}\r\n\r\nexport default guessRarity\r\n","export const rgbToHex = (rgb: [number, number, number]) => {\r\n    return rgb.reduce((acc, cur) => {\r\n        const v = cur.toString(16)\r\n        if (v.length === 1) return acc + '0' + v\r\n        return acc + v\r\n    }, '#')\r\n}\r\n\r\nexport const hexToRgb = (hex: string) => {\r\n    const h = hex.startsWith('#') ? hex.substring(1) : hex\r\n    if (h.length === 3) {\r\n        return h.split('').map((v) => {\r\n            return parseInt(`${v}${v}`, 16)\r\n        })\r\n    } else if (h.length === 6) {\r\n        return h.match(/.{1,2}/g)!.map((v) => {\r\n            return parseInt(v, 16)\r\n        })\r\n    } else {\r\n        throw new Error('Invalid hex input')\r\n    }\r\n}\r\n\r\nexport const distance = (c1: number[], c2: number[]) => {\r\n    if (c1.length !== c2.length) throw new Error('Input arrays are not of equal lengths')\r\n    const sum = [...c1]\r\n        .map((v, i) => {\r\n            return Math.pow(v - c2[i], 2)\r\n        })\r\n        .reduce((acc, cur) => {\r\n            return acc + cur\r\n        })\r\n    return Math.sqrt(sum)\r\n}\r\n","import { pieceRef } from '../data/translation'\r\nimport { setNames, slotNames } from '../data/artifacts'\r\nimport { guessWith } from './parse/helper'\r\nimport guessMainStat from './parse/guessMainStat'\r\nimport guessSubStats from './parse/guessSubStats'\r\nimport guessEnhancement from './parse/guessEnhancement'\r\nimport { MarvinImage } from 'marvinj-ts'\r\nimport { preprocessArtifact } from './preprocessing'\r\nimport getOcr, { OcrOptions } from './ocr'\r\nimport guessRarity from './parse/guessRarity'\r\n\r\nconst guessPieceName = guessWith(\r\n    Object.values(pieceRef).flatMap((artifact) => Object.values(artifact)),\r\n    1\r\n)\r\nconst guessSetName = guessWith(Object.keys(setNames), 1)\r\nconst guessSlotName = guessWith(Object.keys(slotNames), 1)\r\n\r\nexport const parseArtifact = (\r\n    topData: Tesseract.RecognizeResult,\r\n    botData: Tesseract.RecognizeResult,\r\n    setData: Tesseract.RecognizeResult\r\n) => {\r\n    const mainStat = guessMainStat(topData)\r\n    const subStats = guessSubStats(botData)\r\n    const set = guessSetName(setData)\r\n    const slot = guessSlotName(topData)\r\n    const piece = guessPieceName(topData)\r\n\r\n    return { mainStat, subStats, set, slot, piece }\r\n}\r\n\r\ntype Options = { onProgress?: OcrOptions['onProgress'] }\r\nexport const doAll = async (imageData: string, options: Options = {}) => {\r\n    const marvinLoad = (url: string): Promise<MarvinImage> => {\r\n        return new Promise((resolve) => {\r\n            const img = new MarvinImage()\r\n            img.load(url, () => {\r\n                resolve(img)\r\n            })\r\n        })\r\n    }\r\n    const image = await marvinLoad(imageData)\r\n    const processed = Object.values(preprocessArtifact(image))\r\n    const [topRes, botRes, setRes] = await Promise.all(\r\n        processed.map((data) =>\r\n            getOcr(data, {\r\n                onProgress: options.onProgress,\r\n                // langPath: '/static/media',\r\n                // langFile: 'chi_sim.dc1be34a',\r\n            })\r\n        )\r\n    )\r\n    console.log(topRes, botRes, setRes)\r\n    const parse = parseArtifact(topRes, botRes, setRes)\r\n    const rarity = guessRarity(image)\r\n    const enhancement = guessEnhancement(parse.mainStat.value, rarity)\r\n    return Promise.resolve({ ...parse, rarity, enhancement })\r\n}\r\n","export const setNames = {\r\n    悠古的磐岩: 'archaicPetra',\r\n    冰风迷途的勇士: 'blizzardStrayer',\r\n    染血的骑士道: 'bloodstainedChivalry',\r\n    炽烈的炎之魔女: 'crimsonWitch',\r\n    角斗士的终幕礼: 'gladiatorFinale',\r\n    沉沦之心: 'heartOfDepth',\r\n    渡过烈火的贤人: 'lavaWalker',\r\n    被怜爱的少女: 'maidenBeloved',\r\n    昔日宗室之仪: 'noblesseOblige',\r\n    逆飞的流星: 'retracingBolide',\r\n    平息鸣雷的尊者: 'thunderSmoother',\r\n    如雷的盛怒: 'thunderingFury',\r\n    翠绿之影: 'viridescentVenerer',\r\n    流浪大地的乐团: 'wandererTroupe',\r\n    战狂: 'berserker',\r\n    勇者之心: 'braveHeart',\r\n    守护之心: 'defenderWill',\r\n    流放者: 'exile',\r\n    赌徒: 'gambler',\r\n    教官: 'instructor',\r\n    武人: 'martialArtist',\r\n    祭水之人: 'prayersForDestiny',\r\n    祭火之人: 'prayersForIllumination',\r\n    祭雷之人: 'prayersForWisdom',\r\n    祭冰之人: 'prayersToSpringtime',\r\n    行者之心: 'resolutionOfSojourner',\r\n    学士: 'scholar',\r\n    奇迹: 'tinyMiracle',\r\n    冒险家: 'adventurer',\r\n    幸运儿: 'luckyDog',\r\n    游医: 'travelingDoctor',\r\n}\r\n\r\nexport const slotNames = {\r\n    生之花: 'flower',\r\n    死之羽: 'plume',\r\n    时之沙: 'sands',\r\n    空之杯: 'goblet',\r\n    理之冠: 'circlet',\r\n}\r\n\r\nconst artifactSlotsData = {\r\n    flower: { name: 'Flower of Life', stats: ['hp'] },\r\n    plume: { name: 'Plume of Death', stats: ['atk'] },\r\n    sands: { name: 'Sands of Eon', stats: ['hp%', 'def%', 'atk%', 'eleMas', 'energyRecharge%'] },\r\n    goblet: {\r\n        name: 'Goblet of Eonothem',\r\n        stats: [\r\n            'hp%',\r\n            'def%',\r\n            'atk%',\r\n            'eleMas',\r\n            'physicalDmg%',\r\n            'anemoDmg%',\r\n            'geoDmg%',\r\n            'electroDmg%',\r\n            'hydroDmg%',\r\n            'pyroDmg%',\r\n            'cryoDmg%',\r\n        ],\r\n    },\r\n    circlet: {\r\n        name: 'Circlet of Logos',\r\n        stats: ['hp%', 'def%', 'atk%', 'eleMas', 'critRate%', 'critDmg%', 'healBonus%'],\r\n    },\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport './App.css'\r\nimport { fileToURL } from './util/dataUrl'\r\nimport { doAll } from './ocr/parse'\r\nimport { MarvinImage } from 'marvinj-ts'\r\nimport { preprocessArtifact } from './ocr/preprocessing'\r\n\r\nfunction App() {\r\n    const [origImg, setOrigImg] = useState<string>()\r\n    const [procImg, setProcImg] = useState<string[]>([])\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const [parsedText, setParsedText] = useState<any>()\r\n\r\n    useEffect(() => {\r\n        // what event type is this?\r\n        const onPaste = async (e: any) => {\r\n            const imgUrl = await fileToURL(e.clipboardData!.files[0])\r\n            // let a = document.createElement('a') //Create <a>\r\n            // a.href = imgUrl //Image Base64 Goes here\r\n            // a.download = `${Math.random().toString(36).substring(2)}.png` //File name Here\r\n            // a.click() //Downloaded file\r\n            setOrigImg(imgUrl)\r\n            setParsedText('')\r\n        }\r\n        window.addEventListener('paste', onPaste)\r\n        return () => window.removeEventListener('paste', onPaste)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!origImg) return\r\n        const a = async () => {\r\n            const all = await doAll(origImg, {\r\n                onProgress: (p) => {\r\n                    console.log(p)\r\n                },\r\n            })\r\n            console.log(all)\r\n            setParsedText(JSON.stringify(all, null, 2))\r\n            setLoading(false)\r\n        }\r\n        a()\r\n        setLoading(true)\r\n        const image = new MarvinImage()\r\n        image.load(origImg, () => {\r\n            const processed = Object.values(preprocessArtifact(image))\r\n            setProcImg(processed)\r\n        })\r\n    }, [origImg])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                <p>Ctrl + V</p>\r\n            </div>\r\n            {loading && <p>{'loading'}</p>}\r\n            <div className={'wrapper'}>\r\n                {origImg && <ImageDisplay src={origImg} style={{ gridArea: 'main' }} />}\r\n                <div style={{ gridArea: 'text', overflowY: 'auto' }}>\r\n                    {parsedText && <pre>{parsedText}</pre>}\r\n                </div>\r\n                {procImg?.map((src, i) => {\r\n                    return <ImageDisplay src={src} key={i} />\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ImageDisplay = (props: any) => {\r\n    const { src, name, style } = props\r\n\r\n    return (\r\n        <div className={'image-display'} style={style}>\r\n            <img src={src} />\r\n            <p>{name}</p>\r\n        </div>\r\n    )\r\n}\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}