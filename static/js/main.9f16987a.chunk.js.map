{"version":3,"sources":["util/dataUrl.ts","data/translation.ts","util/hammingDistance.ts","ocr/parse/helper.ts","ocr/parse/guessMainStat.ts","ocr/parse/guessSubStats.ts","data/stats.ts","ocr/parse/guessEnhancement.ts","ocr/preprocessing.ts","traineddata/chi_sim.traineddata","ocr/ocr.ts","data/color.ts","ocr/parse/guessRarity.ts","util/color.ts","ocr/parse.ts","data/artifacts.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["imageDataToURL","imageData","canvas","document","createElement","ctx","getContext","width","height","canvasImageData","createImageData","data","set","putImageData","toDataURL","Error","fileToURL","file","Promise","resolve","reader","FileReader","onloadend","result","readAsDataURL","reject","statRef","atk","chs","eng","hp","def","eleMas","energyRecharge","healBonus","critRate","critDmg","physicalDmg","anemoDmg","geoDmg","electroDmg","hydroDmg","pyroDmg","cryoDmg","dendroDmg","hammingDistance","str1","str2","dist","toLowerCase","i","j","Math","max","length","match","garboRegex","RegExp","numberRegex","removeGarbo","text","replace","getValueType","value","endsWith","parseStatKey","key","language","entry","Object","entries","find","undefined","name","guessWith","ref","maxDistance","lines","map","line","some","guessMainStatValue","sort","a","b","confidence","matches","matchNumbers","filter","guessMainStatKey","values","guessMainStat","console","log","type","approx","parseFloat","guessSubStats","includes","split","statName","statValue","mainStatsData","1","2","3","4","5","guessEnhancement","statVal","rarity","statKey","poss","statArray","indexOf","processImageWithBandPassFilter","color1","color2","options","mode","clone","Uint8ClampedArray","from","bw","invert","r","g","ImageData","preprocessArtifact","image","threshold","multiplier","Marvin","thresholding","getWidth","getHeight","cropLinePos","ceil","y","rowSum","x","getIntComponent0","findCropLine","yPos","top","bottom","crop","splitImage","topData","botData","main","sub","path","dirname","gc","basename","getOcr","progressCb","onProgress","langFile","langPath","worker","createWorker","logger","m","errorHandler","err","error","load","loadLanguage","initialize","setParameters","tessedit_pageseg_mode","PSM","SPARSE_TEXT","recognize","terminate","COLORS","guessRarity","imageIn","cropImg","MarvinImage","avgColor","averageColor","reduce","acc","val","c1","c2","sum","v","pow","cur","sqrt","distance","hex","h","startsWith","substring","parseInt","hexToRgb","Infinity","guessPieceName","archaicPetra","flower","plume","sands","goblet","circlet","blizzardStrayer","bloodstainedChivalry","crimsonWitch","gladiatorFinale","heartOfDepth","lavaWalker","maidenBeloved","noblesseOblige","retracingBolide","thunderSmoother","thunderingFury","viridescentVenerer","wandererTroupe","berserker","braveHeart","defenderWill","exile","gambler","instructor","martialArtist","prayersForDestiny","prayersForIllumination","prayersForWisdom","prayersToSpringtime","resolutionOfSojourner","scholar","tinyMiracle","adventurer","luckyDog","travelingDoctor","flatMap","artifact","guessSetName","keys","悠古的磐岩","冰风迷途的勇士","染血的骑士道","炽烈的炎之魔女","角斗士的终幕礼","沉沦之心","渡过烈火的贤人","被怜爱的少女","昔日宗室之仪","逆飞的流星","平息鸣雷的尊者","如雷的盛怒","翠绿之影","流浪大地的乐团","战狂","勇者之心","守护之心","流放者","赌徒","教官","武人","祭水之人","祭火之人","祭雷之人","祭冰之人","行者之心","学士","奇迹","冒险家","幸运儿","游医","guessSlotName","生之花","死之羽","时之沙","空之杯","理之冠","parseArtifact","setData","mainStat","subStats","slot","piece","doAll","marvinLoad","url","img","processed","all","topRes","botRes","setRes","parse","enhancement","ImageDisplay","props","src","style","className","App","useState","origImg","setOrigImg","procImg","setProcImg","loading","setLoading","parsedText","setParsedText","useEffect","onPaste","e","clipboardData","files","imgUrl","window","addEventListener","removeEventListener","p","JSON","stringify","gridArea","overflowY","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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f,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,GACA,KACA,KACA,GACA,MAEJ,YAAa,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,MAC/E,WAAY,CAAC,EAAK,EAAK,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACnF,aAAc,CAAC,EAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,OAErF0E,EAAG,CACC5E,GAAI,CACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJH,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACjF,MAAO,CACH,IACA,IACA,IACA,KACA,KACA,KACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,GACA,MAEJ,OAAQ,CACJ,IACA,IACA,IACA,KACA,KACA,KACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,GACA,MAEJ,OAAQ,CACJ,IACA,KACA,KACA,KACA,KACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJ,eAAgB,CACZ,IACA,KACA,KACA,KACA,KACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJ,UAAW,CACP,IACA,IACA,IACA,KACA,KACA,KACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,GACA,MAEJK,OAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,KAC9E,kBAAmB,CACf,EACA,EACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJ,YAAa,CACT,IACA,IACA,IACA,IACA,EACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,GACA,MAEJ,WAAY,CACR,IACA,KACA,KACA,KACA,KACA,KACA,KACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJ,aAAc,CACV,IACA,IACA,IACA,EACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,GACA,KACA,OAGR2E,EAAG,CACC7E,GAAI,CACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJH,IAAK,CACD,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEJ,MAAO,CACH,EACA,EACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJ,OAAQ,CACJ,EACA,EACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJ,OAAQ,CACJ,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,GACA,KACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJ,eAAgB,CACZ,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,GACA,KACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJ,UAAW,CACP,EACA,EACA,GACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJK,OAAQ,CACJ,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEJ,kBAAmB,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","file":"static/js/main.9f16987a.chunk.js","sourcesContent":["export const imageDataToURL = (imageData: ImageData) => {\n    // create off-screen canvas element\n    const canvas = document.createElement('canvas')\n    const ctx = canvas.getContext('2d')\n    canvas.width = imageData.width\n    canvas.height = imageData.height\n    if (ctx) {\n        // create imageData object\n        const canvasImageData = ctx.createImageData(imageData.width, imageData.height)\n        // set our buffer as source\n        canvasImageData.data.set(imageData.data)\n        // update canvas with new data\n        ctx.putImageData(canvasImageData, 0, 0)\n        // produces a PNG file\n        return canvas.toDataURL()\n    }\n    throw new Error('Canvas context is not initialized')\n}\n\nexport const imageDataFromImageElement = (image: HTMLImageElement) => {\n    const tempCanvas = document.createElement('canvas')\n    const tempCtx = tempCanvas.getContext('2d')\n    tempCanvas.width = image.width\n    tempCanvas.height = image.height\n    tempCtx!.drawImage(image, 0, 0, image.width, image.height)\n    return tempCtx!.getImageData(0, 0, image.width, image.height)\n}\n\nexport const urlToImageData = (url: string): PromiseLike<ImageData> => {\n    return new Promise((resolve) => {\n        const img = new Image()\n        img.onload = () => resolve(imageDataFromImageElement(img))\n        img.src = url\n    })\n}\n\nexport const fileToURL = (file: File): PromiseLike<string> => {\n    if (!file) return Promise.reject('Not a file')\n    return new Promise((resolve) => {\n        const reader = new FileReader()\n        reader.onloadend = () => {\n            resolve(reader.result as string)\n        }\n        reader.readAsDataURL(file)\n    })\n}\n","export type Language = 'chs' | 'eng'\n\nexport const statRef = {\n    atk: { chs: '攻击力', eng: 'ATK' },\n    hp: { chs: '生命值', eng: 'HP' },\n    def: { chs: '防御力', eng: 'DEF' },\n    eleMas: { chs: '元素精通', eng: 'Elemental Mastery' },\n    energyRecharge: { chs: '元素充能效率', eng: 'Energy Recharge' },\n    healBonus: { chs: '治疗加成', eng: 'Heal Bonus' },\n    critRate: { chs: '暴击率', eng: 'Critical Rate' },\n    critDmg: { chs: '暴击伤害', eng: 'Critical Damage' },\n    physicalDmg: { chs: '物理伤害加成', eng: 'Physical Damage' },\n    anemoDmg: { chs: '风元素伤害加成', eng: 'Anemo Damage' },\n    geoDmg: { chs: '岩元素伤害加成', eng: 'Geo Damage' },\n    electroDmg: { chs: '雷元素伤害加成', eng: 'Electro Damage' },\n    hydroDmg: { chs: '水元素伤害加成', eng: 'Hydro Damage' },\n    pyroDmg: { chs: '火元素伤害加成', eng: 'Pyro Damage' },\n    cryoDmg: { chs: '冰元素伤害加成', eng: 'Cryo Damage' },\n    dendroDmg: { chs: '草元素伤害加成', eng: 'Dendro Damage' },\n}\n\nexport const elementsRef = {\n    physical: { chs: '物理', eng: 'Physical' },\n    anemo: { chs: '风元素', eng: 'Anemo' },\n    geo: { chs: '岩元素', eng: 'Geo' },\n    electro: { chs: '雷元素', eng: 'Electro' },\n    hydro: { chs: '水元素', eng: 'Hydro' },\n    pyro: { chs: '火元素', eng: 'Pyro' },\n    cryo: { chs: '冰元素', eng: 'Cryo' },\n    dendro: { chs: '草元素', eng: 'Dendro' },\n}\n\nexport const pieceRef = {\n    archaicPetra: {\n        flower: '磐陀裂生之花',\n        plume: '嵯峨群峰之翼',\n        sands: '星罗圭壁之晷',\n        goblet: '巉岩琢塑之樽',\n        circlet: '不动玄石之相',\n    },\n    blizzardStrayer: {\n        flower: '历经风雪的思念',\n        plume: '摧冰而行的执望',\n        sands: '冰雪故园的终期',\n        goblet: '遍结寒霜的傲骨',\n        circlet: '破冰踏雪的回音',\n    },\n    bloodstainedChivalry: {\n        flower: '染血的铁之心',\n        plume: '染血的黑之羽',\n        sands: '骑士染血之时',\n        goblet: '染血骑士之杯',\n        circlet: '染血的铁假面',\n    },\n    crimsonWitch: {\n        flower: '魔女的炎之花',\n        plume: '魔女常燃之羽',\n        sands: '魔女破灭之时',\n        goblet: '魔女的心之火',\n        circlet: '焦灼的魔女帽',\n    },\n    gladiatorFinale: {\n        flower: '角斗士的留恋',\n        plume: '角斗士的归宿',\n        sands: '角斗士的希冀',\n        goblet: '角斗士的酣醉',\n        circlet: '角斗士的凯旋',\n    },\n    heartOfDepth: {\n        flower: '饰金胸花',\n        plume: '追忆之风',\n        sands: '坚铜罗盘',\n        goblet: '沉波之盏',\n        circlet: '酒渍船帽',\n    },\n    lavaWalker: {\n        flower: '渡火者的决绝',\n        plume: '渡火者的解脱',\n        sands: '渡火者的煎熬',\n        goblet: '渡火者的醒悟',\n        circlet: '渡火者的智慧',\n    },\n    maidenBeloved: {\n        flower: '远方的少女的心',\n        plume: '少女飘摇的思念',\n        sands: '少女苦短的良辰',\n        goblet: '少女片刻的闲暇',\n        circlet: '少女易逝的芳颜',\n    },\n    noblesseOblige: {\n        flower: '宗室之花',\n        plume: '宗室之翎',\n        sands: '宗室时计',\n        goblet: '宗室银瓮',\n        circlet: '宗室面具',\n    },\n    retracingBolide: {\n        flower: '夏祭之花',\n        plume: '夏祭终末',\n        sands: '夏祭之刻',\n        goblet: '夏祭水玉',\n        circlet: '夏祭之面',\n    },\n    thunderSmoother: {\n        flower: '平雷之心',\n        plume: '平雷之羽',\n        sands: '平雷之刻',\n        goblet: '平雷之器',\n        circlet: '平雷之冠',\n    },\n    thunderingFury: {\n        flower: '雷鸟的怜悯',\n        plume: '雷灾的孑遗',\n        sands: '雷霆的时计',\n        goblet: '降雷的凶兆',\n        circlet: '唤雷的头冠',\n    },\n    viridescentVenerer: {\n        flower: '野花记忆的绿野',\n        plume: '猎人青翠的箭羽',\n        sands: '翠绿猎人的笃定',\n        goblet: '翠绿猎人的容器',\n        circlet: '翠绿的猎人之冠',\n    },\n    wandererTroupe: {\n        flower: '乐团的晨光',\n        plume: '琴师的箭羽',\n        sands: '终幕的时计',\n        goblet: '吟游者之壶',\n        circlet: '指挥的礼帽',\n    },\n    berserker: {\n        flower: '战狂的蔷薇',\n        plume: '战狂的翎羽',\n        sands: '战狂的时计',\n        goblet: '战狂的骨杯',\n        circlet: '战狂的鬼面',\n    },\n    braveHeart: {\n        flower: '勇士的勋章',\n        plume: '勇士的期许',\n        sands: '勇士的坚毅',\n        goblet: '勇士的壮行',\n        circlet: '勇士的冠冕',\n    },\n    defenderWill: {\n        flower: '守护之花',\n        plume: '守护徽印',\n        sands: '守护座钟',\n        goblet: '守护之皿',\n        circlet: '守护束带',\n    },\n    exile: {\n        flower: '流放者之花',\n        plume: '流放者之羽',\n        sands: '流放者怀表',\n        goblet: '流放者之杯',\n        circlet: '流放者头冠',\n    },\n    gambler: {\n        flower: '赌徒的胸花',\n        plume: '赌徒的羽饰',\n        sands: '赌徒的怀表',\n        goblet: '赌徒的骰蛊',\n        circlet: '赌徒的耳环',\n    },\n    instructor: {\n        flower: '教官的胸花',\n        plume: '教官的羽饰',\n        sands: '教官的怀表',\n        goblet: '教官的茶杯',\n        circlet: '教官的帽子',\n    },\n    martialArtist: {\n        flower: '武人的红花',\n        plume: '武人的羽饰',\n        sands: '武人的水漏',\n        goblet: '武人的酒杯',\n        circlet: '武人的头巾',\n    },\n    prayersForDestiny: { circlet: '祭水礼冠' },\n    prayersForIllumination: { circlet: '祭火礼冠' },\n    prayersForWisdom: { circlet: '祭雷礼冠' },\n    prayersToSpringtime: { circlet: '祭冰礼冠' },\n    resolutionOfSojourner: {\n        flower: '故人之心',\n        plume: '归乡之羽',\n        sands: '逐光之石',\n        goblet: '异国之盏',\n        circlet: '感别之冠',\n    },\n    scholar: {\n        flower: '学士的书签',\n        plume: '学士的羽笔',\n        sands: '学士的时钟',\n        goblet: '学士的墨杯',\n        circlet: '学士的镜片',\n    },\n    tinyMiracle: {\n        flower: '奇迹之花',\n        plume: '奇迹之羽',\n        sands: '奇迹之沙',\n        goblet: '奇迹之杯',\n        circlet: '奇迹耳坠',\n    },\n    adventurer: {\n        flower: '冒险家之花',\n        plume: '冒险家尾羽',\n        sands: '冒险家怀表',\n        goblet: '冒险家金杯',\n        circlet: '冒险家头带',\n    },\n    luckyDog: {\n        flower: '幸运儿绿花',\n        plume: '幸运儿鹰羽',\n        sands: '幸运儿沙漏',\n        goblet: '幸运儿之杯',\n        circlet: '幸运儿银冠',\n    },\n    travelingDoctor: {\n        flower: '游医的银莲',\n        plume: '游医的枭羽',\n        sands: '游医的怀钟',\n        goblet: '游医的药壶',\n        circlet: '游医的方巾',\n    },\n}\n","export const hammingDistance = (str1: string, str2: string) => {\n    let dist = 0\n    str1 = str1.toLowerCase()\n    str2 = str2.toLowerCase()\n    for (let i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\n        let match = true\n        if (!str1[i] || !str2[i] || str1[i] !== str2[i]) match = false\n        if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i]) match = true\n        if (!match) dist++\n    }\n    return dist\n}\n","// match spaces and irrelevant special chars\nimport { Language, statRef } from '../../data/translation'\nimport { hammingDistance } from '../../util/hammingDistance'\n\nconst garboRegex = new RegExp(/(\\s|[-!$^&*()_|~=`{}\\[\\]:\";<>?,\\/\\\\|↵，、【】])/g)\n// match numbers and numbers ending in percentage sign\nconst numberRegex = new RegExp(/(?:\\d*\\.)?\\d+%|(?:\\d*\\.)?\\d+/)\n\nexport const removeGarbo = (text: string) => text.replace(garboRegex, '')\nexport const matchNumbers = (text: string) => text.match(numberRegex)\n\nexport const getValueType = (value: string) => (value.endsWith('%') ? 'percent' : 'flat')\n\nexport const parseStatKey = (key: string, language: Language = 'chs') => {\n    const entry = Object.entries(statRef).find(([_, value]) => {\n        return hammingDistance(value[language], key) <= 1\n    })\n    if (entry !== undefined) {\n        return { key: entry[0], name: entry[1][language] }\n    }\n    // undefined is returned if no match\n}\n\nexport const guessWith = (ref: string[], maxDistance = 0) => (data: Tesseract.RecognizeResult) => {\n    // should change to filter to return list of possible matches\n    const match = ref.find((name) => {\n        return data.data.lines\n            .map((line) => removeGarbo(line.text))\n            .some((text) => {\n                if (text === '') return false\n                return hammingDistance(text, name) <= maxDistance\n            })\n    })\n    return match\n}\n","import { getValueType, guessWith, matchNumbers, parseStatKey, removeGarbo } from './helper'\nimport { statRef } from '../../data/translation'\n\nconst guessMainStatValue = (data: Tesseract.RecognizeResult) => {\n    return data.data.lines\n        .sort((a, b) => {\n            return b.confidence - a.confidence\n        })\n        .map((line) => {\n            const text = removeGarbo(line.text)\n            const matches = matchNumbers(text)\n            if (matches) return matches[0]\n            return matches\n        })\n        .filter((match): match is string => match !== null)\n}\n\nconst guessMainStatKey = guessWith(Object.values(statRef).map((a) => a.chs))\n\nexport const guessMainStat = (data: Tesseract.RecognizeResult) => {\n    const value = guessMainStatValue(data)\n    console.log(value)\n    const name = guessMainStatKey(data) ?? ''\n    const type = getValueType(value[0])\n    const approx = parseStatKey(name)\n\n    return { key: approx?.key, name: approx?.name, value: parseFloat(value[0]), type }\n}\n\nexport default guessMainStat\n","import { getValueType, parseStatKey, removeGarbo } from './helper'\n\nconst guessSubStats = (data: Tesseract.RecognizeResult) => {\n    // assume substat lines are in the shape of \"name+value(%)\"\n    return data.data.lines\n        .map((line) => {\n            const text = removeGarbo(line.text)\n            if (!text.includes('+')) return null\n            return text.split('+')\n        })\n        .filter((match): match is string[] => match !== null)\n        .map((match) => {\n            const [statName, statValue] = match\n            const type = getValueType(statValue)\n            const approx = parseStatKey(statName)\n            const key = approx?.key\n            const name = approx?.name ?? statName\n            return { key, name, value: parseFloat(statValue), type }\n        })\n}\n\nexport default guessSubStats\n","// possible roll values\nexport const subStatsData = {\n    hp: {\n        1: [24, 30],\n        2: [50, 61, 72],\n        3: [100, 115, 129, 143],\n        4: [167, 191, 215, 239],\n        5: [209, 239, 269, 299],\n    },\n    'hp%': {\n        1: [1.2, 1.5],\n        2: [1.6, 2, 2.3],\n        3: [2.5, 2.8, 3.2, 3.5],\n        4: [3.3, 3.7, 4.2, 4.7],\n        5: [4.1, 4.7, 5.3, 5.8],\n    },\n    atk: { 1: [2], 2: [3, 4, 5], 3: [7, 8, 9], 4: [11, 12, 14, 16], 5: [14, 16, 18, 19] },\n    'atk%': {\n        1: [1.2, 1.5],\n        2: [1.6, 2, 2.3],\n        3: [2.5, 2.8, 3.2, 3.5],\n        4: [3.3, 3.7, 4.2, 4.7],\n        5: [4.1, 4.7, 5.3, 5.8],\n    },\n    def: { 1: [2], 2: [4, 5, 6], 3: [8, 9, 10, 11], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\n    'def%': {\n        1: [1.5, 1.8],\n        2: [2, 2.5, 2.9],\n        3: [3.1, 3.5, 3.9, 4.4],\n        4: [4.1, 4.7, 5.3, 5.8],\n        5: [5.1, 5.8, 6.6, 7.3],\n    },\n    eleMas: {\n        1: [5, 6],\n        2: [7, 8, 9],\n        3: [10, 11, 13, 14],\n        4: [13, 15, 17, 19],\n        5: [16, 19, 21, 23],\n    },\n    'energyRecharge%': {\n        1: [1.3, 1.6],\n        2: [1.8, 2.2, 2.6],\n        3: [2.7, 3.1, 3.5, 3.9],\n        4: [3.6, 4.1, 4.7, 5.2],\n        5: [4.5, 5.2, 5.8, 6.5],\n    },\n    'critRate%': {\n        1: [0.8, 1],\n        2: [1.1, 1.3, 1.6],\n        3: [1.6, 1.9, 2.1, 2.3],\n        4: [2.2, 2.5, 2.8, 3.1],\n        5: [2.7, 3.1, 3.5, 3.9],\n    },\n    'critDmg%': {\n        1: [1.6, 1.9],\n        2: [2.2, 2.6, 3.1],\n        3: [3.3, 3.7, 4.2, 4.7],\n        4: [4.4, 5, 5.6, 6.2],\n        5: [5.4, 6.2, 7, 7.8],\n    },\n}\n\n// stat at each level\nexport const mainStatsData = {\n    1: {\n        hp: [129, 178, 227, 275, 324],\n        atk: [8, 12, 15, 18, 21],\n        'hp%': [3.1, 4.3, 5.5, 6.7, 7.9],\n        'atk%': [3.1, 4.3, 5.5, 6.7, 7.9],\n        'def%': [3.9, 5.4, 6.9, 8.4, 9.9],\n        'physicalDmg%': [3.9, 5.4, 6.9, 8.4, 9.9],\n        'eleDmg%': [3.1, 4.3, 5.5, 6.7, 7.9],\n        eleMas: [13, 17, 22, 27, 32],\n        'energyRecharge%': [3.5, 4.8, 6.1, 7.5, 8.8],\n        'critRate%': [2.1, 2.9, 3.7, 4.5, 5.3],\n        'critDmg%': [4.2, 5.8, 7.4, 9.0, 10.5],\n        'healBonus%': [2.4, 3.3, 4.3, 5.2, 6.1],\n    },\n    2: {\n        hp: [258, 331, 404, 478, 551, 624, 697, 770, 843],\n        atk: [17, 22, 26, 31, 36, 41, 45, 50, 55],\n        'hp%': [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\n        'atk%': [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\n        'def%': [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\n        'physicalDmg%': [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\n        'eleDmg%': [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\n        eleMas: [17, 22, 26, 31, 36, 41, 45, 50, 55],\n        'energyRecharge%': [4.7, 6, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2],\n        'critRate%': [2.8, 3.6, 4.4, 5.2, 6, 6.8, 7.6, 8.3, 9.1],\n        'critDmg%': [5.6, 7.2, 8.8, 10.4, 11.9, 13.5, 15.1, 16.7, 18.3],\n        'healBonus%': [3.2, 4.1, 5.1, 6, 6.9, 7.8, 8.7, 9.6, 10.5],\n    },\n    3: {\n        hp: [430, 552, 674, 796, 918, 1040, 1162, 1283, 1405, 1527, 1649, 1771, 1893],\n        atk: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123],\n        'hp%': [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\n        'atk%': [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\n        'def%': [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\n        'physicalDmg%': [\n            6.6,\n            8.4,\n            10.3,\n            12.1,\n            14.0,\n            15.8,\n            17.7,\n            19.6,\n            21.4,\n            23.3,\n            25.1,\n            27.0,\n            28.8,\n        ],\n        'eleDmg%': [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\n        eleMas: [21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 80, 86, 92],\n        'energyRecharge%': [\n            5.8,\n            7.5,\n            9.1,\n            10.8,\n            12.4,\n            14.1,\n            15.7,\n            17.4,\n            19.0,\n            20.7,\n            22.3,\n            24.0,\n            25.6,\n        ],\n        'critRate%': [3.5, 4.5, 5.5, 6.5, 7.5, 8.4, 9.4, 10.4, 11.4, 12.4, 13.4, 14.4, 15.4],\n        'critDmg%': [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8],\n        'healBonus%': [4.0, 5.2, 6.3, 7.5, 8.6, 9.8, 10.9, 12.0, 13.2, 14.3, 15.5, 16.6, 17.8],\n    },\n    4: {\n        hp: [\n            645,\n            828,\n            1011,\n            1194,\n            1377,\n            1559,\n            1742,\n            1925,\n            2108,\n            2291,\n            2474,\n            2657,\n            2839,\n            3022,\n            3205,\n            3388,\n            3571,\n        ],\n        atk: [42, 54, 66, 78, 90, 102, 113, 125, 137, 149, 161, 173, 185, 197, 209, 221, 232],\n        'hp%': [\n            6.3,\n            8.1,\n            9.9,\n            11.6,\n            13.4,\n            15.2,\n            17.0,\n            18.8,\n            20.6,\n            22.3,\n            24.1,\n            25.9,\n            27.7,\n            29.5,\n            31.3,\n            33.0,\n            34.8,\n        ],\n        'atk%': [\n            6.3,\n            8.1,\n            9.9,\n            11.6,\n            13.4,\n            15.2,\n            17.0,\n            18.8,\n            20.6,\n            22.3,\n            24.1,\n            25.9,\n            27.7,\n            29.5,\n            31.3,\n            33.0,\n            34.8,\n        ],\n        'def%': [\n            7.9,\n            10.1,\n            12.3,\n            14.6,\n            16.8,\n            19.0,\n            21.2,\n            23.5,\n            25.7,\n            27.9,\n            30.2,\n            32.4,\n            34.6,\n            36.8,\n            39.1,\n            41.3,\n            43.5,\n        ],\n        'physicalDmg%': [\n            7.9,\n            10.1,\n            12.3,\n            14.6,\n            16.8,\n            19.0,\n            21.2,\n            23.5,\n            25.7,\n            27.9,\n            30.2,\n            32.4,\n            34.6,\n            36.8,\n            39.1,\n            41.3,\n            43.5,\n        ],\n        'eleDmg%': [\n            6.3,\n            8.1,\n            9.9,\n            11.6,\n            13.4,\n            15.2,\n            17.0,\n            18.8,\n            20.6,\n            22.3,\n            24.1,\n            25.9,\n            27.7,\n            29.5,\n            31.3,\n            33.0,\n            34.8,\n        ],\n        eleMas: [25, 32, 39, 47, 54, 61, 68, 75, 82, 89, 97, 104, 111, 118, 125, 132, 139],\n        'energyRecharge%': [\n            7.0,\n            9.0,\n            11.0,\n            12.9,\n            14.9,\n            16.9,\n            18.9,\n            20.9,\n            22.8,\n            24.8,\n            26.8,\n            28.8,\n            30.8,\n            32.8,\n            34.7,\n            36.7,\n            38.7,\n        ],\n        'critRate%': [\n            4.2,\n            5.4,\n            6.6,\n            7.8,\n            9.0,\n            10.1,\n            11.3,\n            12.5,\n            13.7,\n            14.9,\n            16.1,\n            17.3,\n            18.5,\n            19.7,\n            20.8,\n            22.0,\n            23.2,\n        ],\n        'critDmg%': [\n            8.4,\n            10.8,\n            13.1,\n            15.5,\n            17.9,\n            20.3,\n            22.7,\n            25.0,\n            27.4,\n            29.8,\n            32.2,\n            34.5,\n            36.9,\n            39.3,\n            41.7,\n            44.1,\n            46.4,\n        ],\n        'healBonus%': [\n            4.8,\n            6.2,\n            7.6,\n            9.0,\n            10.3,\n            11.7,\n            13.1,\n            14.4,\n            15.8,\n            17.2,\n            18.6,\n            19.9,\n            21.3,\n            22.7,\n            24.0,\n            25.4,\n            26.8,\n        ],\n    },\n    5: {\n        hp: [\n            717,\n            920,\n            1123,\n            1326,\n            1530,\n            1733,\n            1936,\n            2139,\n            2342,\n            2545,\n            2749,\n            2952,\n            3155,\n            3358,\n            3561,\n            3764,\n            3967,\n            4171,\n            4374,\n            4577,\n            4780,\n        ],\n        atk: [\n            47,\n            60,\n            73,\n            86,\n            100,\n            113,\n            126,\n            139,\n            152,\n            166,\n            179,\n            192,\n            205,\n            219,\n            232,\n            245,\n            258,\n            272,\n            285,\n            298,\n            311,\n        ],\n        'hp%': [\n            7.0,\n            9.0,\n            11.0,\n            12.9,\n            14.9,\n            16.9,\n            18.9,\n            20.9,\n            22.8,\n            24.8,\n            26.8,\n            28.8,\n            30.8,\n            32.8,\n            34.7,\n            36.7,\n            38.7,\n            40.7,\n            42.7,\n            44.6,\n            46.6,\n        ],\n        'atk%': [\n            7.0,\n            9.0,\n            11.0,\n            12.9,\n            14.9,\n            16.9,\n            18.9,\n            20.9,\n            22.8,\n            24.8,\n            26.8,\n            28.8,\n            30.8,\n            32.8,\n            34.7,\n            36.7,\n            38.7,\n            40.7,\n            42.7,\n            44.6,\n            46.6,\n        ],\n        'def%': [\n            8.7,\n            11.2,\n            13.7,\n            16.2,\n            18.6,\n            21.1,\n            23.6,\n            26.1,\n            28.6,\n            31,\n            33.5,\n            36,\n            38.5,\n            40.9,\n            43.4,\n            45.9,\n            48.4,\n            50.8,\n            53.3,\n            55.8,\n            58.3,\n        ],\n        'physicalDmg%': [\n            8.7,\n            11.2,\n            13.7,\n            16.2,\n            18.6,\n            21.1,\n            23.6,\n            26.1,\n            28.6,\n            31,\n            33.5,\n            36,\n            38.5,\n            40.9,\n            43.4,\n            45.9,\n            48.4,\n            50.8,\n            53.3,\n            55.8,\n            58.3,\n        ],\n        'eleDmg%': [\n            7.0,\n            9.0,\n            11.0,\n            12.9,\n            14.9,\n            16.9,\n            18.9,\n            20.9,\n            22.8,\n            24.8,\n            26.8,\n            28.8,\n            30.8,\n            32.8,\n            34.7,\n            36.7,\n            38.7,\n            40.7,\n            42.7,\n            44.6,\n            46.6,\n        ],\n        eleMas: [\n            28,\n            36,\n            44,\n            52,\n            60,\n            68,\n            76,\n            84,\n            91,\n            99,\n            107,\n            115,\n            123,\n            131,\n            139,\n            147,\n            155,\n            163,\n            171,\n            179,\n            187,\n        ],\n        'energyRecharge%': [\n            7.8,\n            10.0,\n            12.2,\n            14.4,\n            16.6,\n            18.8,\n            21.0,\n            23.2,\n            25.4,\n            27.6,\n            29.8,\n            32.0,\n            34.2,\n            36.4,\n            38.6,\n            40.8,\n            43.0,\n            45.2,\n            47.4,\n            49.6,\n            51.8,\n        ],\n        'critRate%': [\n            4.7,\n            6.0,\n            7.3,\n            8.6,\n            9.9,\n            11.3,\n            12.6,\n            13.9,\n            15.2,\n            16.6,\n            17.9,\n            19.2,\n            20.5,\n            21.8,\n            23.2,\n            24.5,\n            25.8,\n            27.1,\n            28.4,\n            29.8,\n            31.1,\n        ],\n        'critDmg%': [\n            9.3,\n            11.9,\n            14.6,\n            17.2,\n            19.9,\n            22.5,\n            25.5,\n            27.8,\n            30.5,\n            33.1,\n            35.8,\n            38.4,\n            41.1,\n            43.7,\n            46.3,\n            49.0,\n            51.6,\n            54.3,\n            56.9,\n            59.6,\n            62.2,\n        ],\n        'healBonus%': [\n            5.4,\n            6.9,\n            8.4,\n            10.0,\n            11.5,\n            13.0,\n            14.5,\n            16.1,\n            17.6,\n            19.1,\n            20.6,\n            22.2,\n            23.7,\n            25.2,\n            26.7,\n            28.3,\n            29.8,\n            31.3,\n            32.8,\n            34.4,\n            35.9,\n        ],\n    },\n}\n","// guess enhancement level based on main stat value\nimport { Rarity } from './guessRarity'\nimport { mainStatsData } from '../../data/stats'\n\nconst guessEnhancement = (statVal: number, rarity: Rarity, statKey?: string): number => {\n    const data = mainStatsData[rarity]\n    const poss = Object.values(data).find((statArray) => statArray.includes(statVal))\n    if (poss) {\n        return poss.indexOf(statVal)\n    }\n    return 0 // defaults to 0\n}\n\nexport default guessEnhancement\n","import { Marvin, MarvinImage } from 'marvinj-ts'\nimport { imageDataToURL } from '../util/dataUrl'\n\nexport const findCropLine = (image: MarvinImage, threshold = 220, multiplier: number = 0.85) => {\n    const clone = image.clone()\n    Marvin.thresholding(clone, clone, threshold, 255)\n    const width = clone.getWidth()\n    const height = clone.getHeight()\n    const max = width * 255\n\n    // default to half height\n    let cropLinePos = Math.ceil(height / 2)\n\n    for (let y = 0; y < height; y++) {\n        let rowSum = 0\n        for (let x = 0; x < width; x++) {\n            // since the image is thresholded, every channel should be the same,\n            const brightness = clone.getIntComponent0(x, y)\n            rowSum += brightness\n        }\n        if (rowSum >= multiplier * max) {\n            cropLinePos = y\n            break\n        }\n    }\n    return cropLinePos\n}\n\nexport const splitImage = (image: MarvinImage, yPos: number): [MarvinImage, MarvinImage] => {\n    const top = image.clone()\n    const bottom = image.clone()\n\n    Marvin.crop(image, top, 0, 0, image.getWidth(), yPos)\n    Marvin.crop(image, bottom, 0, yPos, image.getWidth(), image.getHeight() - yPos)\n\n    return [top, bottom]\n}\n\n// https://github.com/frzyc/genshin-optimizer\ntype Color = { r: number; g: number; b: number }\nexport const processImageWithBandPassFilter = (\n    imageData: ImageData,\n    color1: Color,\n    color2: Color,\n    options: { mode?: string }\n) => {\n    //region - \"top\",\"bot\",\"all\" default all\n    //mode - \"bw\",\"color\",\"invert\" default color\n    let { mode } = options\n    const clone = Uint8ClampedArray.from(imageData.data)\n    const bw = mode === 'bw'\n    const invert = mode === 'invert'\n    for (let i = 0; i < clone.length; i += 4) {\n        const r = clone[i]\n        const g = clone[i + 1]\n        const b = clone[i + 2]\n        if (\n            r >= color1.r &&\n            r <= color2.r &&\n            g >= color1.g &&\n            g <= color2.g &&\n            b >= color1.b &&\n            b <= color2.b\n        ) {\n            if (bw) {\n                clone[i] = clone[i + 1] = clone[i + 2] = 0\n            } else if (invert) {\n                clone[i] = 255 - r\n                clone[i + 1] = 255 - g\n                clone[i + 2] = 255 - b\n            }\n        } else {\n            clone[i] = clone[i + 1] = clone[i + 2] = 255\n        }\n    }\n    return new ImageData(clone, imageData.width, imageData.height)\n}\n\nexport const preprocessArtifact = (image: MarvinImage) => {\n    const line = findCropLine(image)\n    const [top, bottom] = splitImage(image, line)\n\n    const topData = new ImageData(top.data, top.getWidth(), top.getHeight())\n    const botData = new ImageData(bottom.data, bottom.getWidth(), bottom.getHeight())\n\n    return {\n        main: imageDataToURL(\n            processImageWithBandPassFilter(\n                topData,\n                { r: 140, g: 140, b: 140 },\n                { r: 255, g: 255, b: 255 },\n                { mode: 'bw' }\n            )\n        ),\n        sub: imageDataToURL(\n            processImageWithBandPassFilter(\n                botData,\n                { r: 30, g: 65, b: 80 },\n                { r: 130, g: 160, b: 160 },\n                { mode: 'bw' }\n            )\n        ),\n        set: imageDataToURL(\n            processImageWithBandPassFilter(\n                botData,\n                { r: 0, g: 170, b: 0 },\n                { r: 180, g: 255, b: 255 },\n                { mode: 'bw' }\n            )\n        ),\n    }\n}\n","export default __webpack_public_path__ + \"static/media/chi_sim.dc1be34a.traineddata\";","import { createWorker, PSM } from 'tesseract.js'\n// @ts-ignore\nimport gc from '../traineddata/chi_sim.traineddata'\nimport path from 'path'\nconsole.log(path.dirname(gc), path.basename(gc))\n\ntype Image =\n    | string\n    | HTMLImageElement\n    | HTMLCanvasElement\n    | HTMLVideoElement\n    | CanvasRenderingContext2D\n    | File\n    | Blob\n    | ImageData\n    | Buffer\n\nexport type TesseractProgress = {\n    workerId: string\n    jobId: string\n    status:\n        | 'loading tesseract core'\n        | 'loading language traineddata'\n        | 'initializing api'\n        | 'recognizing text'\n    progress: number\n}\n\nexport type OcrOptions = {\n    langPath?: string\n    langFile?: string\n    onProgress?: (m: TesseractProgress) => any\n}\nconst getOcr = async (image: Image, options: OcrOptions = {}) => {\n    const progressCb = options.onProgress\n    const langFile = options.langFile ?? 'chi_sim'\n    const langPath = options.langPath ?? '/'\n\n    const worker = createWorker({\n        // langPath,\n        // gzip: options.langPath !== undefined,\n        logger: (m: TesseractProgress) => {\n            if (progressCb) progressCb(m)\n        },\n        errorHandler: (err) => console.error(err),\n    })\n    await worker.load()\n    await worker.loadLanguage(langFile)\n    await worker.initialize(langFile)\n    // sparse text seems to work better\n    // @ts-ignore\n    await worker.setParameters({ tessedit_pageseg_mode: PSM.SPARSE_TEXT })\n    const result = await worker.recognize(image)\n    await worker.terminate()\n    return result\n}\n\nexport default getOcr\n","// arbitrary values that works pretty well\nexport const COLORS = {\n    3: '#60759a',\n    4: '#8a66a0',\n    5: '#9c7354',\n}\n","import { Marvin, MarvinImage } from 'marvinj-ts'\nimport { COLORS } from '../../data/color'\nimport { distance, hexToRgb } from '../../util/color'\n\nexport type Rarity = 1 | 2 | 3 | 4 | 5 | '1' | '2' | '3' | '4' | '5'\n\n// guess stars based on average color\nconst guessRarity = (imageIn: MarvinImage): Rarity => {\n    const width = imageIn.getWidth()\n    const height = imageIn.getHeight()\n    const cropImg = new MarvinImage(width, height)\n    Marvin.crop(imageIn, cropImg, 0, 0, width, Math.ceil(height / 2))\n    const avgColor: [number, number, number] = Marvin.averageColor(cropImg)\n    const min = Object.entries(COLORS).reduce(\n        (acc, [key, val]) => {\n            const dist = distance(avgColor, hexToRgb(val))\n            if (dist < acc[1]) return [key, dist]\n            return acc\n        },\n        ['', Infinity]\n    )\n    return min[0] as Rarity\n}\n\nexport default guessRarity\n","export const rgbToHex = (rgb: [number, number, number]) => {\n    return rgb.reduce((acc, cur) => {\n        const v = cur.toString(16)\n        if (v.length === 1) return acc + '0' + v\n        return acc + v\n    }, '#')\n}\n\nexport const hexToRgb = (hex: string) => {\n    const h = hex.startsWith('#') ? hex.substring(1) : hex\n    if (h.length === 3) {\n        return h.split('').map((v) => {\n            return parseInt(`${v}${v}`, 16)\n        })\n    } else if (h.length === 6) {\n        return h.match(/.{1,2}/g)!.map((v) => {\n            return parseInt(v, 16)\n        })\n    } else {\n        throw new Error('Invalid hex input')\n    }\n}\n\nexport const distance = (c1: number[], c2: number[]) => {\n    if (c1.length !== c2.length) throw new Error('Input arrays are not of equal lengths')\n    const sum = [...c1]\n        .map((v, i) => {\n            return Math.pow(v - c2[i], 2)\n        })\n        .reduce((acc, cur) => {\n            return acc + cur\n        })\n    return Math.sqrt(sum)\n}\n","import { pieceRef } from '../data/translation'\nimport { setNames, slotNames } from '../data/artifacts'\nimport { guessWith } from './parse/helper'\nimport guessMainStat from './parse/guessMainStat'\nimport guessSubStats from './parse/guessSubStats'\nimport guessEnhancement from './parse/guessEnhancement'\nimport { MarvinImage } from 'marvinj-ts'\nimport { preprocessArtifact } from './preprocessing'\nimport getOcr, { OcrOptions } from './ocr'\nimport guessRarity from './parse/guessRarity'\n\nconst guessPieceName = guessWith(\n    Object.values(pieceRef).flatMap((artifact) => Object.values(artifact)),\n    1\n)\nconst guessSetName = guessWith(Object.keys(setNames), 1)\nconst guessSlotName = guessWith(Object.keys(slotNames), 1)\n\nexport const parseArtifact = (\n    topData: Tesseract.RecognizeResult,\n    botData: Tesseract.RecognizeResult,\n    setData: Tesseract.RecognizeResult\n) => {\n    const mainStat = guessMainStat(topData)\n    const subStats = guessSubStats(botData)\n    const set = guessSetName(setData)\n    const slot = guessSlotName(topData)\n    const piece = guessPieceName(topData)\n\n    return { mainStat, subStats, set, slot, piece }\n}\n\ntype Options = { onProgress?: OcrOptions['onProgress'] }\nexport const doAll = async (imageData: string, options: Options = {}) => {\n    const marvinLoad = (url: string): Promise<MarvinImage> => {\n        return new Promise((resolve) => {\n            const img = new MarvinImage()\n            img.load(url, () => {\n                resolve(img)\n            })\n        })\n    }\n    const image = await marvinLoad(imageData)\n    const processed = Object.values(preprocessArtifact(image))\n    const [topRes, botRes, setRes] = await Promise.all(\n        processed.map((data) =>\n            getOcr(data, {\n                onProgress: options.onProgress,\n                // langPath: '/static/media',\n                // langFile: 'chi_sim.dc1be34a',\n            })\n        )\n    )\n    console.log(topRes, botRes, setRes)\n    const parse = parseArtifact(topRes, botRes, setRes)\n    const rarity = guessRarity(image)\n    const enhancement = guessEnhancement(parse.mainStat.value, rarity)\n    return Promise.resolve({ ...parse, rarity, enhancement })\n}\n","export const setNames = {\n    悠古的磐岩: 'archaicPetra',\n    冰风迷途的勇士: 'blizzardStrayer',\n    染血的骑士道: 'bloodstainedChivalry',\n    炽烈的炎之魔女: 'crimsonWitch',\n    角斗士的终幕礼: 'gladiatorFinale',\n    沉沦之心: 'heartOfDepth',\n    渡过烈火的贤人: 'lavaWalker',\n    被怜爱的少女: 'maidenBeloved',\n    昔日宗室之仪: 'noblesseOblige',\n    逆飞的流星: 'retracingBolide',\n    平息鸣雷的尊者: 'thunderSmoother',\n    如雷的盛怒: 'thunderingFury',\n    翠绿之影: 'viridescentVenerer',\n    流浪大地的乐团: 'wandererTroupe',\n    战狂: 'berserker',\n    勇者之心: 'braveHeart',\n    守护之心: 'defenderWill',\n    流放者: 'exile',\n    赌徒: 'gambler',\n    教官: 'instructor',\n    武人: 'martialArtist',\n    祭水之人: 'prayersForDestiny',\n    祭火之人: 'prayersForIllumination',\n    祭雷之人: 'prayersForWisdom',\n    祭冰之人: 'prayersToSpringtime',\n    行者之心: 'resolutionOfSojourner',\n    学士: 'scholar',\n    奇迹: 'tinyMiracle',\n    冒险家: 'adventurer',\n    幸运儿: 'luckyDog',\n    游医: 'travelingDoctor',\n}\n\nexport const slotNames = {\n    生之花: 'flower',\n    死之羽: 'plume',\n    时之沙: 'sands',\n    空之杯: 'goblet',\n    理之冠: 'circlet',\n}\n\nconst artifactSlotsData = {\n    flower: { name: 'Flower of Life', stats: ['hp'] },\n    plume: { name: 'Plume of Death', stats: ['atk'] },\n    sands: { name: 'Sands of Eon', stats: ['hp%', 'def%', 'atk%', 'eleMas', 'energyRecharge%'] },\n    goblet: {\n        name: 'Goblet of Eonothem',\n        stats: [\n            'hp%',\n            'def%',\n            'atk%',\n            'eleMas',\n            'physicalDmg%',\n            'anemoDmg%',\n            'geoDmg%',\n            'electroDmg%',\n            'hydroDmg%',\n            'pyroDmg%',\n            'cryoDmg%',\n        ],\n    },\n    circlet: {\n        name: 'Circlet of Logos',\n        stats: ['hp%', 'def%', 'atk%', 'eleMas', 'critRate%', 'critDmg%', 'healBonus%'],\n    },\n}\n","import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport { fileToURL } from './util/dataUrl'\nimport { doAll } from './ocr/parse'\nimport { MarvinImage } from 'marvinj-ts'\nimport { preprocessArtifact } from './ocr/preprocessing'\n\nfunction App() {\n    const [origImg, setOrigImg] = useState<string>()\n    const [procImg, setProcImg] = useState<string[]>([])\n    const [loading, setLoading] = useState<boolean>(false)\n    const [parsedText, setParsedText] = useState<any>()\n\n    useEffect(() => {\n        // what event type is this?\n        const onPaste = async (e: any) => {\n            const imgUrl = await fileToURL(e.clipboardData!.files[0])\n            // let a = document.createElement('a') //Create <a>\n            // a.href = imgUrl //Image Base64 Goes here\n            // a.download = `${Math.random().toString(36).substring(2)}.png` //File name Here\n            // a.click() //Downloaded file\n            setOrigImg(imgUrl)\n            setParsedText('')\n        }\n        window.addEventListener('paste', onPaste)\n        return () => window.removeEventListener('paste', onPaste)\n    }, [])\n\n    useEffect(() => {\n        if (!origImg) return\n        const a = async () => {\n            const all = await doAll(origImg, {\n                onProgress: (p) => {\n                    console.log(p)\n                },\n            })\n            console.log(all)\n            setParsedText(JSON.stringify(all, null, 2))\n            setLoading(false)\n        }\n        a()\n        setLoading(true)\n        const image = new MarvinImage()\n        image.load(origImg, () => {\n            const processed = Object.values(preprocessArtifact(image))\n            setProcImg(processed)\n        })\n    }, [origImg])\n\n    return (\n        <div className=\"App\">\n            <div>\n                <p>Ctrl + V</p>\n            </div>\n            {loading && <p>{'loading'}</p>}\n            <div className={'wrapper'}>\n                {origImg && <ImageDisplay src={origImg} style={{ gridArea: 'main' }} />}\n                <div style={{ gridArea: 'text', overflowY: 'auto' }}>\n                    {parsedText && <pre>{parsedText}</pre>}\n                </div>\n                {procImg?.map((src, i) => {\n                    return <ImageDisplay src={src} key={i} />\n                })}\n            </div>\n        </div>\n    )\n}\n\nconst ImageDisplay = (props: any) => {\n    const { src, name, style } = props\n\n    return (\n        <div className={'image-display'} style={style}>\n            <img src={src} />\n            <p>{name}</p>\n        </div>\n    )\n}\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}